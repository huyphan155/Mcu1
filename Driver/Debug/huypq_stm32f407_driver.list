
huypq_stm32f407_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b98  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08000d20  08000d20  00010d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d3c  08000d3c  00010d44  2**0
                  CONTENTS
  4 .ARM          00000000  08000d3c  08000d3c  00010d44  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d3c  08000d44  00010d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d3c  08000d3c  00010d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d40  08000d40  00010d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010d44  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010d44  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010d74  2**0
                  CONTENTS, READONLY
 14 .debug_info   00001367  00000000  00000000  00010db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000004f1  00000000  00000000  0001211e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000138  00000000  00000000  00012610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000dd  00000000  00000000  00012748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000270e  00000000  00000000  00012825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000018c7  00000000  00000000  00014f33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009767  00000000  00000000  000167fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000428  00000000  00000000  0001ff64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0002038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d08 	.word	0x08000d08

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000d08 	.word	0x08000d08

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <GPIO_Button_Init>:
}


void GPIO_Button_Init()

{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;
	//this is button gpio configuration : D5
	GPIOBtn.pGPIOx = GPIOD;
 80001de:	4b09      	ldr	r3, [pc, #36]	; (8000204 <GPIO_Button_Init+0x2c>)
 80001e0:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 80001e2:	2305      	movs	r3, #5
 80001e4:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 80001e6:	2304      	movs	r3, #4
 80001e8:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinOSpeed = GPIO_OUT_SP_HIGH;
 80001ea:	2302      	movs	r3, #2
 80001ec:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPUPD = GPIO_CONFIG_PU;
 80001ee:	2301      	movs	r3, #1
 80001f0:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80001f2:	1d3b      	adds	r3, r7, #4
 80001f4:	4618      	mov	r0, r3
 80001f6:	f000 f9a7 	bl	8000548 <GPIO_Init>
}
 80001fa:	bf00      	nop
 80001fc:	3710      	adds	r7, #16
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	40020c00 	.word	0x40020c00

08000208 <GPIO_INIT_SPI2>:

void GPIO_INIT_SPI2()
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b084      	sub	sp, #16
 800020c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioSpi2;
	GpioSpi2.pGPIOx = GPIOB;
 800020e:	4b14      	ldr	r3, [pc, #80]	; (8000260 <GPIO_INIT_SPI2+0x58>)
 8000210:	607b      	str	r3, [r7, #4]
	GpioSpi2.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000212:	2302      	movs	r3, #2
 8000214:	727b      	strb	r3, [r7, #9]
	GpioSpi2.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000216:	2305      	movs	r3, #5
 8000218:	737b      	strb	r3, [r7, #13]
	GpioSpi2.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPER_PP;
 800021a:	2300      	movs	r3, #0
 800021c:	733b      	strb	r3, [r7, #12]
	GpioSpi2.GPIO_PinConfig.GPIO_PinOSpeed = GPIO_OUT_SP_HIGH;
 800021e:	2302      	movs	r3, #2
 8000220:	72bb      	strb	r3, [r7, #10]
	GpioSpi2.GPIO_PinConfig.GPIO_PinPUPD = GPIO_CONFIG_NO_PUPD;
 8000222:	2300      	movs	r3, #0
 8000224:	72fb      	strb	r3, [r7, #11]

	//PB13 - SPI2_SCK
	GpioSpi2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000226:	230d      	movs	r3, #13
 8000228:	723b      	strb	r3, [r7, #8]
	// init GPIO Port
	GPIO_Init(&GpioSpi2);
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f98b 	bl	8000548 <GPIO_Init>

	//PB15 - SPI2_MOSI
	GpioSpi2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000232:	230f      	movs	r3, #15
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioSpi2);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 f985 	bl	8000548 <GPIO_Init>

	//PB14 - SPI2_MISO
	GpioSpi2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800023e:	230e      	movs	r3, #14
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioSpi2);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 f97f 	bl	8000548 <GPIO_Init>

	//PB12 - SPI2_NSS
	GpioSpi2.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800024a:	230c      	movs	r3, #12
 800024c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&GpioSpi2);
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f979 	bl	8000548 <GPIO_Init>
}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	40020400 	.word	0x40020400

08000264 <SPI2_Inits>:

void SPI2_Inits()
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b084      	sub	sp, #16
 8000268:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2Handle;

	SPI2Handle.pSPIx = SPI2;
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <SPI2_Inits+0x38>)
 800026c:	607b      	str	r3, [r7, #4]
	SPI2Handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800026e:	2301      	movs	r3, #1
 8000270:	727b      	strb	r3, [r7, #9]
	SPI2Handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 8000272:	2300      	movs	r3, #0
 8000274:	737b      	strb	r3, [r7, #13]
	SPI2Handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 8000276:	2300      	movs	r3, #0
 8000278:	733b      	strb	r3, [r7, #12]
	SPI2Handle.SPI_Config.SPI_DFF = SPI_DFF_8_BIT;
 800027a:	2300      	movs	r3, #0
 800027c:	72fb      	strb	r3, [r7, #11]
	SPI2Handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800027e:	2301      	movs	r3, #1
 8000280:	723b      	strb	r3, [r7, #8]
	SPI2Handle.SPI_Config.SPI_SSM = SPI_SSM_DI; // hardware slave management enable
 8000282:	2300      	movs	r3, #0
 8000284:	73bb      	strb	r3, [r7, #14]
	SPI2Handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; // generate sclk of 2MHZ
 8000286:	2302      	movs	r3, #2
 8000288:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2Handle);
 800028a:	1d3b      	adds	r3, r7, #4
 800028c:	4618      	mov	r0, r3
 800028e:	f000 fbb5 	bl	80009fc <SPI_Init>
}
 8000292:	bf00      	nop
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	40003800 	.word	0x40003800

080002a0 <main>:

int main(void)
{
 80002a0:	b5b0      	push	{r4, r5, r7, lr}
 80002a2:	b088      	sub	sp, #32
 80002a4:	af00      	add	r7, sp, #0

	char user_data[] = "sent data to arduino uno r3";
 80002a6:	4b17      	ldr	r3, [pc, #92]	; (8000304 <main+0x64>)
 80002a8:	1d3c      	adds	r4, r7, #4
 80002aa:	461d      	mov	r5, r3
 80002ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80002b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	// this function is used to initialize a GPIO button
	GPIO_Button_Init();
 80002b8:	f7ff ff8e 	bl	80001d8 <GPIO_Button_Init>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	GPIO_INIT_SPI2();
 80002bc:	f7ff ffa4 	bl	8000208 <GPIO_INIT_SPI2>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80002c0:	f7ff ffd0 	bl	8000264 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 80002c4:	2101      	movs	r1, #1
 80002c6:	4810      	ldr	r0, [pc, #64]	; (8000308 <main+0x68>)
 80002c8:	f000 fcd4 	bl	8000c74 <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while(! GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_5));
 80002cc:	bf00      	nop
 80002ce:	2105      	movs	r1, #5
 80002d0:	480e      	ldr	r0, [pc, #56]	; (800030c <main+0x6c>)
 80002d2:	f000 fb05 	bl	80008e0 <GPIO_ReadFromInputPin>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f8      	beq.n	80002ce <main+0x2e>

		//enable the SPI2 peripheral : Enable SPI_CR1_SPE bit
		SPI_PeripheralControl(SPI2,ENABLE);
 80002dc:	2101      	movs	r1, #1
 80002de:	480a      	ldr	r0, [pc, #40]	; (8000308 <main+0x68>)
 80002e0:	f000 fca3 	bl	8000c2a <SPI_PeripheralControl>

		//sent data
		SPI_SentData(SPI2, (uint8_t*)user_data, strlen(user_data));
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	4618      	mov	r0, r3
 80002e8:	f7ff ff6e 	bl	80001c8 <strlen>
 80002ec:	4602      	mov	r2, r0
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	4619      	mov	r1, r3
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <main+0x68>)
 80002f4:	f000 fc5f 	bl	8000bb6 <SPI_SentData>

		// wait for the data is finish sending : TBD
		//while (	(SPI_GetFlagStatus(SPI2,(1 << SPI_SR_BSY)) );

		//disable the SPI2 peripheral when finish sending the data
		SPI_PeripheralControl(SPI2,ENABLE);
 80002f8:	2101      	movs	r1, #1
 80002fa:	4803      	ldr	r0, [pc, #12]	; (8000308 <main+0x68>)
 80002fc:	f000 fc95 	bl	8000c2a <SPI_PeripheralControl>
		while(! GPIO_ReadFromInputPin(GPIOD, GPIO_PIN_NO_5));
 8000300:	e7e4      	b.n	80002cc <main+0x2c>
 8000302:	bf00      	nop
 8000304:	08000d20 	.word	0x08000d20
 8000308:	40003800 	.word	0x40003800
 800030c:	40020c00 	.word	0x40020c00

08000310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000310:	480d      	ldr	r0, [pc, #52]	; (8000348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000312:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000314:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000318:	480c      	ldr	r0, [pc, #48]	; (800034c <LoopForever+0x6>)
  ldr r1, =_edata
 800031a:	490d      	ldr	r1, [pc, #52]	; (8000350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800031c:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <LoopForever+0xe>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000320:	e002      	b.n	8000328 <LoopCopyDataInit>

08000322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000326:	3304      	adds	r3, #4

08000328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800032a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800032c:	d3f9      	bcc.n	8000322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800032e:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000330:	4c0a      	ldr	r4, [pc, #40]	; (800035c <LoopForever+0x16>)
  movs r3, #0
 8000332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000334:	e001      	b.n	800033a <LoopFillZerobss>

08000336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000338:	3204      	adds	r2, #4

0800033a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800033a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800033c:	d3fb      	bcc.n	8000336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800033e:	f000 fcbf 	bl	8000cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000342:	f7ff ffad 	bl	80002a0 <main>

08000346 <LoopForever>:

LoopForever:
  b LoopForever
 8000346:	e7fe      	b.n	8000346 <LoopForever>
  ldr   r0, =_estack
 8000348:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800034c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000354:	08000d44 	.word	0x08000d44
  ldr r2, =_sbss
 8000358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800035c:	2000001c 	.word	0x2000001c

08000360 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000360:	e7fe      	b.n	8000360 <ADC_IRQHandler>
	...

08000364 <GPIO_PeriClockControl>:
 * @retval      OTHER :  The job fail
 *
 * @Note
 */
GPIO_JobResultType GPIO_PeriClockControl(GPIO_RegMap_t *pGPIOx, uint8_t EnOrDI)
{
 8000364:	b480      	push	{r7}
 8000366:	b085      	sub	sp, #20
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
 800036c:	460b      	mov	r3, r1
 800036e:	70fb      	strb	r3, [r7, #3]
	GPIO_JobResultType eLldRetVal = GPIO_JOB_OK;
 8000370:	2300      	movs	r3, #0
 8000372:	73fb      	strb	r3, [r7, #15]
	if(ENABLE == EnOrDI)
 8000374:	78fb      	ldrb	r3, [r7, #3]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d162      	bne.n	8000440 <GPIO_PeriClockControl+0xdc>
	{
		if(pGPIOx == GPIOA)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a68      	ldr	r2, [pc, #416]	; (8000520 <GPIO_PeriClockControl+0x1bc>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_PeriClockControl+0x2c>
		{
			GPIOA_PERIF_CLK_EB();
 8000382:	4b68      	ldr	r3, [pc, #416]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a67      	ldr	r2, [pc, #412]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
 800038e:	e0bf      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOB)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a65      	ldr	r2, [pc, #404]	; (8000528 <GPIO_PeriClockControl+0x1c4>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PeriClockControl+0x42>
		{
			GPIOB_PERIF_CLK_EB();
 8000398:	4b62      	ldr	r3, [pc, #392]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a61      	ldr	r2, [pc, #388]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 800039e:	f043 0302 	orr.w	r3, r3, #2
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
 80003a4:	e0b4      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOC)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a60      	ldr	r2, [pc, #384]	; (800052c <GPIO_PeriClockControl+0x1c8>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PeriClockControl+0x58>
		{
			GPIOC_PERIF_CLK_EB();
 80003ae:	4b5d      	ldr	r3, [pc, #372]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a5c      	ldr	r2, [pc, #368]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80003b4:	f043 0304 	orr.w	r3, r3, #4
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
 80003ba:	e0a9      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOD)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a5c      	ldr	r2, [pc, #368]	; (8000530 <GPIO_PeriClockControl+0x1cc>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PeriClockControl+0x6e>
		{
			GPIOD_PERIF_CLK_EB();
 80003c4:	4b57      	ldr	r3, [pc, #348]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a56      	ldr	r2, [pc, #344]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
 80003d0:	e09e      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOE)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a57      	ldr	r2, [pc, #348]	; (8000534 <GPIO_PeriClockControl+0x1d0>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_PeriClockControl+0x84>
		{
			GPIOE_PERIF_CLK_EB();
 80003da:	4b52      	ldr	r3, [pc, #328]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a51      	ldr	r2, [pc, #324]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80003e0:	f043 0310 	orr.w	r3, r3, #16
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
 80003e6:	e093      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOF)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a53      	ldr	r2, [pc, #332]	; (8000538 <GPIO_PeriClockControl+0x1d4>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PeriClockControl+0x9a>
		{
			GPIOF_PERIF_CLK_EB();
 80003f0:	4b4c      	ldr	r3, [pc, #304]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a4b      	ldr	r2, [pc, #300]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80003f6:	f043 0320 	orr.w	r3, r3, #32
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
 80003fc:	e088      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOG)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a4e      	ldr	r2, [pc, #312]	; (800053c <GPIO_PeriClockControl+0x1d8>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PeriClockControl+0xb0>
		{
			GPIOG_PERIF_CLK_EB();
 8000406:	4b47      	ldr	r3, [pc, #284]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a46      	ldr	r2, [pc, #280]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 800040c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
 8000412:	e07d      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOH)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a4a      	ldr	r2, [pc, #296]	; (8000540 <GPIO_PeriClockControl+0x1dc>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PeriClockControl+0xc6>
		{
			GPIOH_PERIF_CLK_EB();
 800041c:	4b41      	ldr	r3, [pc, #260]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a40      	ldr	r2, [pc, #256]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 8000422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
 8000428:	e072      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOI)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a45      	ldr	r2, [pc, #276]	; (8000544 <GPIO_PeriClockControl+0x1e0>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d16e      	bne.n	8000510 <GPIO_PeriClockControl+0x1ac>
		{
			GPIOI_PERIF_CLK_EB();
 8000432:	4b3c      	ldr	r3, [pc, #240]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a3b      	ldr	r2, [pc, #236]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 8000438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
 800043e:	e067      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
	}
	else if(DISABLE == EnOrDI)
 8000440:	78fb      	ldrb	r3, [r7, #3]
 8000442:	2b00      	cmp	r3, #0
 8000444:	d162      	bne.n	800050c <GPIO_PeriClockControl+0x1a8>
	{
		if(pGPIOx == GPIOA)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a35      	ldr	r2, [pc, #212]	; (8000520 <GPIO_PeriClockControl+0x1bc>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d106      	bne.n	800045c <GPIO_PeriClockControl+0xf8>
		{
			GPIOA_PERIF_CLK_DI();
 800044e:	4b35      	ldr	r3, [pc, #212]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000452:	4a34      	ldr	r2, [pc, #208]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 8000454:	f023 0301 	bic.w	r3, r3, #1
 8000458:	6313      	str	r3, [r2, #48]	; 0x30
 800045a:	e059      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOB)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a32      	ldr	r2, [pc, #200]	; (8000528 <GPIO_PeriClockControl+0x1c4>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <GPIO_PeriClockControl+0x10e>
		{
			GPIOB_PERIF_CLK_DI();
 8000464:	4b2f      	ldr	r3, [pc, #188]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000468:	4a2e      	ldr	r2, [pc, #184]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 800046a:	f023 0302 	bic.w	r3, r3, #2
 800046e:	6313      	str	r3, [r2, #48]	; 0x30
 8000470:	e04e      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOC)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a2d      	ldr	r2, [pc, #180]	; (800052c <GPIO_PeriClockControl+0x1c8>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <GPIO_PeriClockControl+0x124>
		{
			GPIOC_PERIF_CLK_DI();
 800047a:	4b2a      	ldr	r3, [pc, #168]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047e:	4a29      	ldr	r2, [pc, #164]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 8000480:	f023 0304 	bic.w	r3, r3, #4
 8000484:	6313      	str	r3, [r2, #48]	; 0x30
 8000486:	e043      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOD)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a29      	ldr	r2, [pc, #164]	; (8000530 <GPIO_PeriClockControl+0x1cc>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <GPIO_PeriClockControl+0x13a>
		{
			GPIOD_PERIF_CLK_DI();
 8000490:	4b24      	ldr	r3, [pc, #144]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000494:	4a23      	ldr	r2, [pc, #140]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 8000496:	f023 0308 	bic.w	r3, r3, #8
 800049a:	6313      	str	r3, [r2, #48]	; 0x30
 800049c:	e038      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOE)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a24      	ldr	r2, [pc, #144]	; (8000534 <GPIO_PeriClockControl+0x1d0>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_PeriClockControl+0x150>
		{
			GPIOE_PERIF_CLK_DI();
 80004a6:	4b1f      	ldr	r3, [pc, #124]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004aa:	4a1e      	ldr	r2, [pc, #120]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80004ac:	f023 0310 	bic.w	r3, r3, #16
 80004b0:	6313      	str	r3, [r2, #48]	; 0x30
 80004b2:	e02d      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOF)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a20      	ldr	r2, [pc, #128]	; (8000538 <GPIO_PeriClockControl+0x1d4>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <GPIO_PeriClockControl+0x166>
		{
			GPIOF_PERIF_CLK_DI();
 80004bc:	4b19      	ldr	r3, [pc, #100]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c0:	4a18      	ldr	r2, [pc, #96]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80004c2:	f023 0320 	bic.w	r3, r3, #32
 80004c6:	6313      	str	r3, [r2, #48]	; 0x30
 80004c8:	e022      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOG)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a1b      	ldr	r2, [pc, #108]	; (800053c <GPIO_PeriClockControl+0x1d8>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <GPIO_PeriClockControl+0x17c>
		{
			GPIOG_PERIF_CLK_DI();
 80004d2:	4b14      	ldr	r3, [pc, #80]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d6:	4a13      	ldr	r2, [pc, #76]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80004d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004dc:	6313      	str	r3, [r2, #48]	; 0x30
 80004de:	e017      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOH)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a17      	ldr	r2, [pc, #92]	; (8000540 <GPIO_PeriClockControl+0x1dc>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <GPIO_PeriClockControl+0x192>
		{
			GPIOH_PERIF_CLK_DI();
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ec:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 80004ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004f2:	6313      	str	r3, [r2, #48]	; 0x30
 80004f4:	e00c      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOI)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a12      	ldr	r2, [pc, #72]	; (8000544 <GPIO_PeriClockControl+0x1e0>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d108      	bne.n	8000510 <GPIO_PeriClockControl+0x1ac>
		{
			GPIOI_PERIF_CLK_DI();
 80004fe:	4b09      	ldr	r3, [pc, #36]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a08      	ldr	r2, [pc, #32]	; (8000524 <GPIO_PeriClockControl+0x1c0>)
 8000504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	e001      	b.n	8000510 <GPIO_PeriClockControl+0x1ac>
		}
	}
	else
	{
		eLldRetVal = GPIO_BLOCK_INVALID;
 800050c:	2305      	movs	r3, #5
 800050e:	73fb      	strb	r3, [r7, #15]
	}
	return eLldRetVal;
 8000510:	7bfb      	ldrb	r3, [r7, #15]
}
 8000512:	4618      	mov	r0, r3
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40020000 	.word	0x40020000
 8000524:	40023800 	.word	0x40023800
 8000528:	40020400 	.word	0x40020400
 800052c:	04002080 	.word	0x04002080
 8000530:	40020c00 	.word	0x40020c00
 8000534:	40021000 	.word	0x40021000
 8000538:	40021400 	.word	0x40021400
 800053c:	40021800 	.word	0x40021800
 8000540:	40021c00 	.word	0x40021c00
 8000544:	40022000 	.word	0x40022000

08000548 <GPIO_Init>:
 * 			      E5. Enable interrupt reception on that IRQ number (processor side)
 * 			      E6. Implement IRQ handler
 *
 */
GPIO_JobResultType GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	uint32_t tempReg = 0U;
 8000550:	2300      	movs	r3, #0
 8000552:	60fb      	str	r3, [r7, #12]
	GPIO_JobResultType eLldRetVal = GPIO_JOB_OK;
 8000554:	2300      	movs	r3, #0
 8000556:	72fb      	strb	r3, [r7, #11]

	//peripheral clock enable
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2101      	movs	r1, #1
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff ff00 	bl	8000364 <GPIO_PeriClockControl>

	// 1. configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	795b      	ldrb	r3, [r3, #5]
 8000568:	2b03      	cmp	r3, #3
 800056a:	d820      	bhi.n	80005ae <GPIO_Init+0x66>
	{
		tempReg = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	461a      	mov	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	791b      	ldrb	r3, [r3, #4]
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	60fb      	str	r3, [r7, #12]
		// clear before setting
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	791b      	ldrb	r3, [r3, #4]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	2103      	movs	r1, #3
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	4619      	mov	r1, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	400a      	ands	r2, r1
 800059a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= tempReg; // setting
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6819      	ldr	r1, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	430a      	orrs	r2, r1
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	e0d9      	b.n	8000762 <GPIO_Init+0x21a>
	}
	else // interrupt mode
	{
		//E0. pin must be in input mode.
		//set as input mode 00
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	791b      	ldrb	r3, [r3, #4]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	2103      	movs	r1, #3
 80005bc:	fa01 f303 	lsl.w	r3, r1, r3
 80005c0:	43db      	mvns	r3, r3
 80005c2:	4619      	mov	r1, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	400a      	ands	r2, r1
 80005ca:	601a      	str	r2, [r3, #0]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	795b      	ldrb	r3, [r3, #5]
 80005d0:	2b04      	cmp	r3, #4
 80005d2:	d117      	bne.n	8000604 <GPIO_Init+0xbc>
		{
			// E1. Configure the edge trigger (FT)
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d4:	4b4a      	ldr	r3, [pc, #296]	; (8000700 <GPIO_Init+0x1b8>)
 80005d6:	68db      	ldr	r3, [r3, #12]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	7912      	ldrb	r2, [r2, #4]
 80005dc:	4611      	mov	r1, r2
 80005de:	2201      	movs	r2, #1
 80005e0:	408a      	lsls	r2, r1
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a46      	ldr	r2, [pc, #280]	; (8000700 <GPIO_Init+0x1b8>)
 80005e6:	430b      	orrs	r3, r1
 80005e8:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //disable RT
 80005ea:	4b45      	ldr	r3, [pc, #276]	; (8000700 <GPIO_Init+0x1b8>)
 80005ec:	689b      	ldr	r3, [r3, #8]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	7912      	ldrb	r2, [r2, #4]
 80005f2:	4611      	mov	r1, r2
 80005f4:	2201      	movs	r2, #1
 80005f6:	408a      	lsls	r2, r1
 80005f8:	43d2      	mvns	r2, r2
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a40      	ldr	r2, [pc, #256]	; (8000700 <GPIO_Init+0x1b8>)
 80005fe:	400b      	ands	r3, r1
 8000600:	6093      	str	r3, [r2, #8]
 8000602:	e035      	b.n	8000670 <GPIO_Init+0x128>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	795b      	ldrb	r3, [r3, #5]
 8000608:	2b05      	cmp	r3, #5
 800060a:	d117      	bne.n	800063c <GPIO_Init+0xf4>
		{
			// E1. Configure the edge trigger (RT)
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060c:	4b3c      	ldr	r3, [pc, #240]	; (8000700 <GPIO_Init+0x1b8>)
 800060e:	689b      	ldr	r3, [r3, #8]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	7912      	ldrb	r2, [r2, #4]
 8000614:	4611      	mov	r1, r2
 8000616:	2201      	movs	r2, #1
 8000618:	408a      	lsls	r2, r1
 800061a:	4611      	mov	r1, r2
 800061c:	4a38      	ldr	r2, [pc, #224]	; (8000700 <GPIO_Init+0x1b8>)
 800061e:	430b      	orrs	r3, r1
 8000620:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //disable FT
 8000622:	4b37      	ldr	r3, [pc, #220]	; (8000700 <GPIO_Init+0x1b8>)
 8000624:	68db      	ldr	r3, [r3, #12]
 8000626:	687a      	ldr	r2, [r7, #4]
 8000628:	7912      	ldrb	r2, [r2, #4]
 800062a:	4611      	mov	r1, r2
 800062c:	2201      	movs	r2, #1
 800062e:	408a      	lsls	r2, r1
 8000630:	43d2      	mvns	r2, r2
 8000632:	4611      	mov	r1, r2
 8000634:	4a32      	ldr	r2, [pc, #200]	; (8000700 <GPIO_Init+0x1b8>)
 8000636:	400b      	ands	r3, r1
 8000638:	60d3      	str	r3, [r2, #12]
 800063a:	e019      	b.n	8000670 <GPIO_Init+0x128>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	795b      	ldrb	r3, [r3, #5]
 8000640:	2b06      	cmp	r3, #6
 8000642:	d115      	bne.n	8000670 <GPIO_Init+0x128>
		{
			// E1. Configure the edge trigger (RFT)
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000644:	4b2e      	ldr	r3, [pc, #184]	; (8000700 <GPIO_Init+0x1b8>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	7912      	ldrb	r2, [r2, #4]
 800064c:	4611      	mov	r1, r2
 800064e:	2201      	movs	r2, #1
 8000650:	408a      	lsls	r2, r1
 8000652:	4611      	mov	r1, r2
 8000654:	4a2a      	ldr	r2, [pc, #168]	; (8000700 <GPIO_Init+0x1b8>)
 8000656:	430b      	orrs	r3, r1
 8000658:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // enable both RT & FT
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <GPIO_Init+0x1b8>)
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	687a      	ldr	r2, [r7, #4]
 8000660:	7912      	ldrb	r2, [r2, #4]
 8000662:	4611      	mov	r1, r2
 8000664:	2201      	movs	r2, #1
 8000666:	408a      	lsls	r2, r1
 8000668:	4611      	mov	r1, r2
 800066a:	4a25      	ldr	r2, [pc, #148]	; (8000700 <GPIO_Init+0x1b8>)
 800066c:	430b      	orrs	r3, r1
 800066e:	6093      	str	r3, [r2, #8]
		}
		// Configure the GPIO port selection in SYSCFG
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4; //get the right SYSCFG_EXTICRx register
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	089b      	lsrs	r3, r3, #2
 8000676:	72bb      	strb	r3, [r7, #10]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4; //get the right position
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	791b      	ldrb	r3, [r3, #4]
 800067c:	f003 0303 	and.w	r3, r3, #3
 8000680:	727b      	strb	r3, [r7, #9]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a1f      	ldr	r2, [pc, #124]	; (8000704 <GPIO_Init+0x1bc>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d04d      	beq.n	8000728 <GPIO_Init+0x1e0>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a1d      	ldr	r2, [pc, #116]	; (8000708 <GPIO_Init+0x1c0>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d032      	beq.n	80006fc <GPIO_Init+0x1b4>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <GPIO_Init+0x1c4>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d02b      	beq.n	80006f8 <GPIO_Init+0x1b0>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a1a      	ldr	r2, [pc, #104]	; (8000710 <GPIO_Init+0x1c8>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d024      	beq.n	80006f4 <GPIO_Init+0x1ac>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a19      	ldr	r2, [pc, #100]	; (8000714 <GPIO_Init+0x1cc>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d01d      	beq.n	80006f0 <GPIO_Init+0x1a8>
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a17      	ldr	r2, [pc, #92]	; (8000718 <GPIO_Init+0x1d0>)
 80006ba:	4293      	cmp	r3, r2
 80006bc:	d016      	beq.n	80006ec <GPIO_Init+0x1a4>
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	4a16      	ldr	r2, [pc, #88]	; (800071c <GPIO_Init+0x1d4>)
 80006c4:	4293      	cmp	r3, r2
 80006c6:	d00f      	beq.n	80006e8 <GPIO_Init+0x1a0>
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a14      	ldr	r2, [pc, #80]	; (8000720 <GPIO_Init+0x1d8>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d008      	beq.n	80006e4 <GPIO_Init+0x19c>
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a13      	ldr	r2, [pc, #76]	; (8000724 <GPIO_Init+0x1dc>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d101      	bne.n	80006e0 <GPIO_Init+0x198>
 80006dc:	2308      	movs	r3, #8
 80006de:	e024      	b.n	800072a <GPIO_Init+0x1e2>
 80006e0:	2300      	movs	r3, #0
 80006e2:	e022      	b.n	800072a <GPIO_Init+0x1e2>
 80006e4:	2307      	movs	r3, #7
 80006e6:	e020      	b.n	800072a <GPIO_Init+0x1e2>
 80006e8:	2306      	movs	r3, #6
 80006ea:	e01e      	b.n	800072a <GPIO_Init+0x1e2>
 80006ec:	2305      	movs	r3, #5
 80006ee:	e01c      	b.n	800072a <GPIO_Init+0x1e2>
 80006f0:	2304      	movs	r3, #4
 80006f2:	e01a      	b.n	800072a <GPIO_Init+0x1e2>
 80006f4:	2303      	movs	r3, #3
 80006f6:	e018      	b.n	800072a <GPIO_Init+0x1e2>
 80006f8:	2302      	movs	r3, #2
 80006fa:	e016      	b.n	800072a <GPIO_Init+0x1e2>
 80006fc:	2301      	movs	r3, #1
 80006fe:	e014      	b.n	800072a <GPIO_Init+0x1e2>
 8000700:	40013c00 	.word	0x40013c00
 8000704:	40020000 	.word	0x40020000
 8000708:	40020400 	.word	0x40020400
 800070c:	04002080 	.word	0x04002080
 8000710:	40020c00 	.word	0x40020c00
 8000714:	40021000 	.word	0x40021000
 8000718:	40021400 	.word	0x40021400
 800071c:	40021800 	.word	0x40021800
 8000720:	40021c00 	.word	0x40021c00
 8000724:	40022000 	.word	0x40022000
 8000728:	2300      	movs	r3, #0
 800072a:	723b      	strb	r3, [r7, #8]
		SYSCFG_PERIF_CLK_EB(); // enable clock for SYSCFG
 800072c:	4b69      	ldr	r3, [pc, #420]	; (80008d4 <GPIO_Init+0x38c>)
 800072e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000730:	4a68      	ldr	r2, [pc, #416]	; (80008d4 <GPIO_Init+0x38c>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000736:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->SYSCFG_EXTICR[temp1] = portCode << (temp2*4);
 8000738:	7a3a      	ldrb	r2, [r7, #8]
 800073a:	7a7b      	ldrb	r3, [r7, #9]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	fa02 f103 	lsl.w	r1, r2, r3
 8000742:	4a65      	ldr	r2, [pc, #404]	; (80008d8 <GPIO_Init+0x390>)
 8000744:	7abb      	ldrb	r3, [r7, #10]
 8000746:	3302      	adds	r3, #2
 8000748:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// E2. Enable interrupt delivery from peripheral to Processor (peripheral side )
		//. Enable the EXTI interrupt delivery using IMR
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800074c:	4b63      	ldr	r3, [pc, #396]	; (80008dc <GPIO_Init+0x394>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	7912      	ldrb	r2, [r2, #4]
 8000754:	4611      	mov	r1, r2
 8000756:	2201      	movs	r2, #1
 8000758:	408a      	lsls	r2, r1
 800075a:	4611      	mov	r1, r2
 800075c:	4a5f      	ldr	r2, [pc, #380]	; (80008dc <GPIO_Init+0x394>)
 800075e:	430b      	orrs	r3, r1
 8000760:	6013      	str	r3, [r2, #0]
	}

	// reset temp Register
	tempReg = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]

	// 2. configure the Speed
	tempReg = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	799b      	ldrb	r3, [r3, #6]
 800076a:	461a      	mov	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	005b      	lsls	r3, r3, #1
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	60fb      	str	r3, [r7, #12]
	// clear before setting
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	689a      	ldr	r2, [r3, #8]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	2103      	movs	r1, #3
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	43db      	mvns	r3, r3
 800078c:	4619      	mov	r1, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	400a      	ands	r2, r1
 8000794:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= tempReg;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	6899      	ldr	r1, [r3, #8]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	430a      	orrs	r2, r1
 80007a4:	609a      	str	r2, [r3, #8]
	// reset temp Register
	tempReg = 0;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]

	// 3. configure the PUPD settings
	tempReg = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPUPD << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	79db      	ldrb	r3, [r3, #7]
 80007ae:	461a      	mov	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	791b      	ldrb	r3, [r3, #4]
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	60fb      	str	r3, [r7, #12]
	// clear before setting
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	68da      	ldr	r2, [r3, #12]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	2103      	movs	r1, #3
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	43db      	mvns	r3, r3
 80007d0:	4619      	mov	r1, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	400a      	ands	r2, r1
 80007d8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= tempReg;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	68d9      	ldr	r1, [r3, #12]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	430a      	orrs	r2, r1
 80007e8:	60da      	str	r2, [r3, #12]
	// reset temp Register
	tempReg = 0;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]

	// 4. configure the OPType
	tempReg = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	7a1b      	ldrb	r3, [r3, #8]
 80007f2:	461a      	mov	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	791b      	ldrb	r3, [r3, #4]
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	fa02 f303 	lsl.w	r3, r2, r3
 80007fe:	60fb      	str	r3, [r7, #12]
	// clear before setting
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x03 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	005b      	lsls	r3, r3, #1
 800080c:	2103      	movs	r1, #3
 800080e:	fa01 f303 	lsl.w	r3, r1, r3
 8000812:	43db      	mvns	r3, r3
 8000814:	4619      	mov	r1, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	400a      	ands	r2, r1
 800081c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= tempReg;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	6859      	ldr	r1, [r3, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	68fa      	ldr	r2, [r7, #12]
 800082a:	430a      	orrs	r2, r1
 800082c:	605a      	str	r2, [r3, #4]
	// reset temp Register
	tempReg = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]

	//5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	795b      	ldrb	r3, [r3, #5]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d147      	bne.n	80008ca <GPIO_Init+0x382>
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8U)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	791b      	ldrb	r3, [r3, #4]
 800083e:	2b07      	cmp	r3, #7
 8000840:	d820      	bhi.n	8000884 <GPIO_Init+0x33c>
		{
			tempReg = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	7a5b      	ldrb	r3, [r3, #9]
 8000846:	461a      	mov	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	791b      	ldrb	r3, [r3, #4]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	60fb      	str	r3, [r7, #12]
			// clear before setting
			pGPIOHandle->pGPIOx->AFRL &= ~(0x0F << (4*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	6a1a      	ldr	r2, [r3, #32]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	210f      	movs	r1, #15
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	43db      	mvns	r3, r3
 8000868:	4619      	mov	r1, r3
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	400a      	ands	r2, r1
 8000870:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= tempReg;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	6a19      	ldr	r1, [r3, #32]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	68fa      	ldr	r2, [r7, #12]
 800087e:	430a      	orrs	r2, r1
 8000880:	621a      	str	r2, [r3, #32]
 8000882:	e020      	b.n	80008c6 <GPIO_Init+0x37e>
		}
		else
		{
			tempReg = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8)));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7a5b      	ldrb	r3, [r3, #9]
 8000888:	461a      	mov	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	791b      	ldrb	r3, [r3, #4]
 800088e:	3b08      	subs	r3, #8
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	60fb      	str	r3, [r7, #12]
			// clear before setting
			pGPIOHandle->pGPIOx->AFRH &= ~(0x0F << (4*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	791b      	ldrb	r3, [r3, #4]
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	210f      	movs	r1, #15
 80008a6:	fa01 f303 	lsl.w	r3, r1, r3
 80008aa:	43db      	mvns	r3, r3
 80008ac:	4619      	mov	r1, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	400a      	ands	r2, r1
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= tempReg;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	430a      	orrs	r2, r1
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
		}
		// reset temp Register
		tempReg = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
	}

	return eLldRetVal;
 80008ca:	7afb      	ldrb	r3, [r7, #11]
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3710      	adds	r7, #16
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40013800 	.word	0x40013800
 80008dc:	40013c00 	.word	0x40013c00

080008e0 <GPIO_ReadFromInputPin>:
 * @Note         shift the value to the LSB. Then performs a bitwise AND operation
 * 				 with 1 to extract only the least significant bit
 *
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegMap_t *pGPIOx, uint8_t pinNumber)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0U;
 80008ec:	2300      	movs	r3, #0
 80008ee:	73fb      	strb	r3, [r7, #15]
	value = (uint8_t)(( pGPIOx->IDR >> pinNumber ) & (0x01));
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	691a      	ldr	r2, [r3, #16]
 80008f4:	78fb      	ldrb	r3, [r7, #3]
 80008f6:	fa22 f303 	lsr.w	r3, r2, r3
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	73fb      	strb	r3, [r7, #15]
	return value;
 8000902:	7bfb      	ldrb	r3, [r7, #15]
}
 8000904:	4618      	mov	r0, r3
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <SPI_GetFlagStatus>:
static uint8_t SPI_GetFlagStatus(SPI_RegMap_t *pSPIx, uint32_t FlagName);
/*==================================================================================================
*                                         LOCAL FUNCTIONS
==================================================================================================*/
static uint8_t SPI_GetFlagStatus(SPI_RegMap_t *pSPIx, uint32_t FlagName)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
	if(pSPIx->SPI_SR & FlagName) //bit mask
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	689a      	ldr	r2, [r3, #8]
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	4013      	ands	r3, r2
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SPI_GetFlagStatus+0x1a>
	{
		return SET;
 8000926:	2301      	movs	r3, #1
 8000928:	e000      	b.n	800092c <SPI_GetFlagStatus+0x1c>
	}
	return RESET;
 800092a:	2300      	movs	r3, #0
}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SPI_PeriClockControl>:
 * @retval      OTHER : The job failed.
 *
 * @note
 */
Spi_JobResultType SPI_PeriClockControl(SPI_RegMap_t *pSPIx, uint8_t EnOrDI)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	460b      	mov	r3, r1
 8000942:	70fb      	strb	r3, [r7, #3]
    Spi_JobResultType eLldRetVal = SPI_JOB_OK;
 8000944:	2300      	movs	r3, #0
 8000946:	73fb      	strb	r3, [r7, #15]
	if(ENABLE == EnOrDI)
 8000948:	78fb      	ldrb	r3, [r7, #3]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d120      	bne.n	8000990 <SPI_PeriClockControl+0x58>
	{
		if(pSPIx == SPI1)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a26      	ldr	r2, [pc, #152]	; (80009ec <SPI_PeriClockControl+0xb4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d106      	bne.n	8000964 <SPI_PeriClockControl+0x2c>
		{
			SPI1_PERIF_CLK_EB();
 8000956:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <SPI_PeriClockControl+0xb8>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	4a25      	ldr	r2, [pc, #148]	; (80009f0 <SPI_PeriClockControl+0xb8>)
 800095c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000960:	6453      	str	r3, [r2, #68]	; 0x44
 8000962:	e03b      	b.n	80009dc <SPI_PeriClockControl+0xa4>
		}
		else if(pSPIx == SPI2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	4a23      	ldr	r2, [pc, #140]	; (80009f4 <SPI_PeriClockControl+0xbc>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d106      	bne.n	800097a <SPI_PeriClockControl+0x42>
		{
			SPI2_PERIF_CLK_EB();
 800096c:	4b20      	ldr	r3, [pc, #128]	; (80009f0 <SPI_PeriClockControl+0xb8>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	4a1f      	ldr	r2, [pc, #124]	; (80009f0 <SPI_PeriClockControl+0xb8>)
 8000972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000976:	6413      	str	r3, [r2, #64]	; 0x40
 8000978:	e030      	b.n	80009dc <SPI_PeriClockControl+0xa4>
		}
		else if(pSPIx == SPI3)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <SPI_PeriClockControl+0xc0>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d12c      	bne.n	80009dc <SPI_PeriClockControl+0xa4>
		{
			SPI3_PERIF_CLK_EB();
 8000982:	4b1b      	ldr	r3, [pc, #108]	; (80009f0 <SPI_PeriClockControl+0xb8>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <SPI_PeriClockControl+0xb8>)
 8000988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800098c:	6413      	str	r3, [r2, #64]	; 0x40
 800098e:	e025      	b.n	80009dc <SPI_PeriClockControl+0xa4>
		}
	}
	else if(DISABLE == EnOrDI)
 8000990:	78fb      	ldrb	r3, [r7, #3]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d120      	bne.n	80009d8 <SPI_PeriClockControl+0xa0>
	{
		if(pSPIx == SPI1)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4a14      	ldr	r2, [pc, #80]	; (80009ec <SPI_PeriClockControl+0xb4>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d106      	bne.n	80009ac <SPI_PeriClockControl+0x74>
		{
			SPI1_PERIF_CLK_DI();
 800099e:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <SPI_PeriClockControl+0xb8>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	4a13      	ldr	r2, [pc, #76]	; (80009f0 <SPI_PeriClockControl+0xb8>)
 80009a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009a8:	6453      	str	r3, [r2, #68]	; 0x44
 80009aa:	e017      	b.n	80009dc <SPI_PeriClockControl+0xa4>
		}
		else if(pSPIx == SPI2)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <SPI_PeriClockControl+0xbc>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d106      	bne.n	80009c2 <SPI_PeriClockControl+0x8a>
		{
			SPI2_PERIF_CLK_DI();
 80009b4:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <SPI_PeriClockControl+0xb8>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a0d      	ldr	r2, [pc, #52]	; (80009f0 <SPI_PeriClockControl+0xb8>)
 80009ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	e00c      	b.n	80009dc <SPI_PeriClockControl+0xa4>
		}
		else if(pSPIx == SPI3)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a0c      	ldr	r2, [pc, #48]	; (80009f8 <SPI_PeriClockControl+0xc0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d108      	bne.n	80009dc <SPI_PeriClockControl+0xa4>
		{
			SPI3_PERIF_CLK_DI();
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <SPI_PeriClockControl+0xb8>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <SPI_PeriClockControl+0xb8>)
 80009d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009d4:	6413      	str	r3, [r2, #64]	; 0x40
 80009d6:	e001      	b.n	80009dc <SPI_PeriClockControl+0xa4>
		}
	}
	else
	{
		eLldRetVal = SPI_JOB_FAILED;
 80009d8:	2302      	movs	r3, #2
 80009da:	73fb      	strb	r3, [r7, #15]
	}
	return eLldRetVal;
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40013000 	.word	0x40013000
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40003800 	.word	0x40003800
 80009f8:	40003c00 	.word	0x40003c00

080009fc <SPI_Init>:
 *
 * @note
 */

Spi_JobResultType SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	//refere to RM0090 28.5
	Spi_JobResultType eLldRetVal = SPI_JOB_OK;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]

	//peripheral clock enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ff92 	bl	8000938 <SPI_PeriClockControl>

	// clear the SPI_CR1 register
	pSPIHandle->pSPIx->SPI_CR1 = 0;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
	// 1. configure the mode of SPI
	if(pSPIHandle->SPI_Config.SPI_DeviceMode == SPI_DEVICE_MODE_MASTER)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	791b      	ldrb	r3, [r3, #4]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d108      	bne.n	8000a36 <SPI_Init+0x3a>
	{
		pSPIHandle->pSPIx->SPI_CR1 |= (1<<SPI_CR1_MSTR);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f042 0204 	orr.w	r2, r2, #4
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	e00e      	b.n	8000a54 <SPI_Init+0x58>
	}
	else if (pSPIHandle->SPI_Config.SPI_DeviceMode == SPI_DEVICE_MODE_SLAVE)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	791b      	ldrb	r3, [r3, #4]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d108      	bne.n	8000a50 <SPI_Init+0x54>
	{
		pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<SPI_CR1_MSTR);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f022 0204 	bic.w	r2, r2, #4
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	e001      	b.n	8000a54 <SPI_Init+0x58>
	}
	else
	{
		// should not enter here
		eLldRetVal = SPI_JOB_FAILED;
 8000a50:	2302      	movs	r3, #2
 8000a52:	73fb      	strb	r3, [r7, #15]
	}
	// 2. configure the communication mode of SPI
	if(pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	795b      	ldrb	r3, [r3, #5]
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d108      	bne.n	8000a6e <SPI_Init+0x72>
	{
		//BIDIMODE set
		pSPIHandle->pSPIx->SPI_CR1 |= (1<<SPI_CR1_BIDIMODE);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	e023      	b.n	8000ab6 <SPI_Init+0xba>
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	795b      	ldrb	r3, [r3, #5]
 8000a72:	2b01      	cmp	r3, #1
 8000a74:	d108      	bne.n	8000a88 <SPI_Init+0x8c>
	{
		//BIDIMODE clear
		pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<SPI_CR1_BIDIMODE);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a84:	601a      	str	r2, [r3, #0]
 8000a86:	e016      	b.n	8000ab6 <SPI_Init+0xba>
	}
	else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	795b      	ldrb	r3, [r3, #5]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d110      	bne.n	8000ab2 <SPI_Init+0xb6>
	{
		//BIDIMODE clear
		pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<SPI_CR1_BIDIMODE);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681a      	ldr	r2, [r3, #0]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a9e:	601a      	str	r2, [r3, #0]
		// RXONLY set
		pSPIHandle->pSPIx->SPI_CR1 |= (1<<SPI_CR1_RXONLY);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	e001      	b.n	8000ab6 <SPI_Init+0xba>
	}
	else
	{
		// should not enter here
		eLldRetVal = SPI_JOB_FAILED;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	73fb      	strb	r3, [r7, #15]
	}
	// 3. configure the clock speed
	pSPIHandle->pSPIx->SPI_CR1 |= (pSPIHandle->SPI_Config.SPI_SclkSpeed<<SPI_CR1_BR);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	799b      	ldrb	r3, [r3, #6]
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	601a      	str	r2, [r3, #0]
	// 4. configure the data frame format
	if(pSPIHandle->SPI_Config.SPI_DFF == SPI_DFF_8_BIT)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	79db      	ldrb	r3, [r3, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d108      	bne.n	8000ae6 <SPI_Init+0xea>
	{
		pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<SPI_CR1_DFF);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	e00e      	b.n	8000b04 <SPI_Init+0x108>
	}
	else if (pSPIHandle->SPI_Config.SPI_DFF == SPI_DFF_16_BIT)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	79db      	ldrb	r3, [r3, #7]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d108      	bne.n	8000b00 <SPI_Init+0x104>
	{
		pSPIHandle->pSPIx->SPI_CR1 |= (1<<SPI_CR1_DFF);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	e001      	b.n	8000b04 <SPI_Init+0x108>
	}
	else
	{
		// should not enter here
		eLldRetVal = SPI_JOB_FAILED;
 8000b00:	2302      	movs	r3, #2
 8000b02:	73fb      	strb	r3, [r7, #15]
	}
	// 5. Cpol configuration
	if(pSPIHandle->SPI_Config.SPI_CPOL == SPI_CPOL_LOW)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7a1b      	ldrb	r3, [r3, #8]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d108      	bne.n	8000b1e <SPI_Init+0x122>
	{
		pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<SPI_CR1_CPOL);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f022 0202 	bic.w	r2, r2, #2
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	e00e      	b.n	8000b3c <SPI_Init+0x140>
	}
	else if (pSPIHandle->SPI_Config.SPI_CPOL == SPI_CPOL_HIGH)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	7a1b      	ldrb	r3, [r3, #8]
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d108      	bne.n	8000b38 <SPI_Init+0x13c>
	{
		pSPIHandle->pSPIx->SPI_CR1 |= (1<<SPI_CR1_CPOL);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f042 0202 	orr.w	r2, r2, #2
 8000b34:	601a      	str	r2, [r3, #0]
 8000b36:	e001      	b.n	8000b3c <SPI_Init+0x140>
	}
	else
	{
		// should not enter here
		eLldRetVal = SPI_JOB_FAILED;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	73fb      	strb	r3, [r7, #15]
	}
	// 6. Cpha configuration.
	if(pSPIHandle->SPI_Config.SPI_CPHA == SPI_CPHA_LOW)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	7a5b      	ldrb	r3, [r3, #9]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d108      	bne.n	8000b56 <SPI_Init+0x15a>
	{
		pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<SPI_CR1_CPHA);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f022 0201 	bic.w	r2, r2, #1
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	e00e      	b.n	8000b74 <SPI_Init+0x178>
	}
	else if (pSPIHandle->SPI_Config.SPI_CPHA == SPI_CPHA_HIGH)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	7a5b      	ldrb	r3, [r3, #9]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d108      	bne.n	8000b70 <SPI_Init+0x174>
	{
		pSPIHandle->pSPIx->SPI_CR1 |= (1<<SPI_CR1_CPHA);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f042 0201 	orr.w	r2, r2, #1
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	e001      	b.n	8000b74 <SPI_Init+0x178>
	}
	else
	{
		// should not enter here
		eLldRetVal = SPI_JOB_FAILED;
 8000b70:	2302      	movs	r3, #2
 8000b72:	73fb      	strb	r3, [r7, #15]
	}
	// 7. configure the Software slave management
	if(pSPIHandle->SPI_Config.SPI_SSM == SPI_SSM_DI)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	7a9b      	ldrb	r3, [r3, #10]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d108      	bne.n	8000b8e <SPI_Init+0x192>
	{
		pSPIHandle->pSPIx->SPI_CR1 &= ~(1<<SPI_CR1_SSM);
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	e00e      	b.n	8000bac <SPI_Init+0x1b0>
	}
	else if (pSPIHandle->SPI_Config.SPI_SSM == SPI_SSM_EN)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	7a9b      	ldrb	r3, [r3, #10]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d108      	bne.n	8000ba8 <SPI_Init+0x1ac>
	{
		pSPIHandle->pSPIx->SPI_CR1 |= (1<<SPI_CR1_SSM);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	e001      	b.n	8000bac <SPI_Init+0x1b0>
	}
	else
	{
		// should not enter here
		eLldRetVal = SPI_JOB_FAILED;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	73fb      	strb	r3, [r7, #15]
	}
	return eLldRetVal;
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3710      	adds	r7, #16
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <SPI_SentData>:
 * @retval      OTHER : The job failed
 *
 * @note        Blocking function
 */
Spi_JobResultType SPI_SentData(SPI_RegMap_t *pSPIx, Spi_BufferSize *pTxBuffer, uint32_t Len)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b086      	sub	sp, #24
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
	Spi_JobResultType eLldRetVal = SPI_JOB_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	75fb      	strb	r3, [r7, #23]
	uint8_t FlagStatus = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	75bb      	strb	r3, [r7, #22]
	while(Len != 0U)
 8000bca:	e026      	b.n	8000c1a <SPI_SentData+0x64>
	{
		FlagStatus = SPI_GetFlagStatus(pSPIx,(1 << SPI_SR_TXE));
 8000bcc:	2102      	movs	r1, #2
 8000bce:	68f8      	ldr	r0, [r7, #12]
 8000bd0:	f7ff fe9e 	bl	8000910 <SPI_GetFlagStatus>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	75bb      	strb	r3, [r7, #22]
		// wait until the Tx buffer is empty ( TXE is SET )
		while (RESET == FlagStatus);
 8000bd8:	bf00      	nop
 8000bda:	7dbb      	ldrb	r3, [r7, #22]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d0fc      	beq.n	8000bda <SPI_SentData+0x24>
		// check DFF to see the data is 8bit or 16bit
		if (pSPIx->SPI_CR1 & (1 << SPI_CR1_DFF))
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d00b      	beq.n	8000c04 <SPI_SentData+0x4e>
		{
			// 16 bit DFF case
			// load the data in to the DR ( data register )
			pSPIx->SPI_DR = *((uint16_t*)pTxBuffer); // type cast to uint16_t and get value
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	461a      	mov	r2, r3
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	60da      	str	r2, [r3, #12]
			Len -= 2;
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	3b02      	subs	r3, #2
 8000bfa:	607b      	str	r3, [r7, #4]
			// increase to point to the next data
			(uint16_t*)pTxBuffer++;
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	e00a      	b.n	8000c1a <SPI_SentData+0x64>
		}
		else
		{
			// 8 bit DFF case
			pSPIx->SPI_DR = *pTxBuffer; // get value. No need  to type cast because pointer is uint8_t by default
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	60da      	str	r2, [r3, #12]
			Len--;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	3b01      	subs	r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
			// increase to point to the next data
			pTxBuffer++;
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	3301      	adds	r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
	while(Len != 0U)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d1d5      	bne.n	8000bcc <SPI_SentData+0x16>
		}

	}
	return eLldRetVal;
 8000c20:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3718      	adds	r7, #24
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <SPI_PeripheralControl>:
 * @retval      OTHER : The job failed
 *
 * @note
 */
Spi_JobResultType SPI_PeripheralControl(SPI_RegMap_t *pSPIx, uint8_t EnOrDI)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	b085      	sub	sp, #20
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
 8000c32:	460b      	mov	r3, r1
 8000c34:	70fb      	strb	r3, [r7, #3]
	Spi_JobResultType eLldRetVal = SPI_JOB_OK;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]
	if(EnOrDI == ENABLE)
 8000c3a:	78fb      	ldrb	r3, [r7, #3]
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d106      	bne.n	8000c4e <SPI_PeripheralControl+0x24>
	{
		pSPIx->SPI_CR1 |= (1<<SPI_CR1_SPE);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	e00b      	b.n	8000c66 <SPI_PeripheralControl+0x3c>
	}
	else if(EnOrDI == DISABLE)
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d106      	bne.n	8000c62 <SPI_PeripheralControl+0x38>
	{
		pSPIx->SPI_CR1 &= ~(1<<SPI_CR1_SPE);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	e001      	b.n	8000c66 <SPI_PeripheralControl+0x3c>
	}
	else
	{
		// should not enter here
		eLldRetVal = SPI_JOB_FAILED;
 8000c62:	2302      	movs	r3, #2
 8000c64:	73fb      	strb	r3, [r7, #15]
	}
	return eLldRetVal;
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <SPI_SSOEConfig>:
 * @retval      OTHER : The job failed
 *
 * @note
 */
Spi_JobResultType SPI_SSOEConfig(SPI_RegMap_t *pSPIx, uint8_t EnOrDI)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	460b      	mov	r3, r1
 8000c7e:	70fb      	strb	r3, [r7, #3]
	Spi_JobResultType eLldRetVal = SPI_JOB_OK;
 8000c80:	2300      	movs	r3, #0
 8000c82:	73fb      	strb	r3, [r7, #15]
	if(EnOrDI == ENABLE)
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d106      	bne.n	8000c98 <SPI_SSOEConfig+0x24>
	{
		pSPIx->SPI_CR2 |= (1<<SPI_CR2_SSOE);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f043 0204 	orr.w	r2, r3, #4
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	e00b      	b.n	8000cb0 <SPI_SSOEConfig+0x3c>
	}
	else if(EnOrDI == DISABLE)
 8000c98:	78fb      	ldrb	r3, [r7, #3]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d106      	bne.n	8000cac <SPI_SSOEConfig+0x38>
	{
		pSPIx->SPI_CR2 &= ~(1<<SPI_CR2_SSOE);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f023 0204 	bic.w	r2, r3, #4
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	e001      	b.n	8000cb0 <SPI_SSOEConfig+0x3c>
	}
	else
	{
		// should not enter here
		eLldRetVal = SPI_JOB_FAILED;
 8000cac:	2302      	movs	r3, #2
 8000cae:	73fb      	strb	r3, [r7, #15]
	}
	return eLldRetVal;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3714      	adds	r7, #20
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <__libc_init_array>:
 8000cc0:	b570      	push	{r4, r5, r6, lr}
 8000cc2:	4d0d      	ldr	r5, [pc, #52]	; (8000cf8 <__libc_init_array+0x38>)
 8000cc4:	4c0d      	ldr	r4, [pc, #52]	; (8000cfc <__libc_init_array+0x3c>)
 8000cc6:	1b64      	subs	r4, r4, r5
 8000cc8:	10a4      	asrs	r4, r4, #2
 8000cca:	2600      	movs	r6, #0
 8000ccc:	42a6      	cmp	r6, r4
 8000cce:	d109      	bne.n	8000ce4 <__libc_init_array+0x24>
 8000cd0:	4d0b      	ldr	r5, [pc, #44]	; (8000d00 <__libc_init_array+0x40>)
 8000cd2:	4c0c      	ldr	r4, [pc, #48]	; (8000d04 <__libc_init_array+0x44>)
 8000cd4:	f000 f818 	bl	8000d08 <_init>
 8000cd8:	1b64      	subs	r4, r4, r5
 8000cda:	10a4      	asrs	r4, r4, #2
 8000cdc:	2600      	movs	r6, #0
 8000cde:	42a6      	cmp	r6, r4
 8000ce0:	d105      	bne.n	8000cee <__libc_init_array+0x2e>
 8000ce2:	bd70      	pop	{r4, r5, r6, pc}
 8000ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ce8:	4798      	blx	r3
 8000cea:	3601      	adds	r6, #1
 8000cec:	e7ee      	b.n	8000ccc <__libc_init_array+0xc>
 8000cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf2:	4798      	blx	r3
 8000cf4:	3601      	adds	r6, #1
 8000cf6:	e7f2      	b.n	8000cde <__libc_init_array+0x1e>
 8000cf8:	08000d3c 	.word	0x08000d3c
 8000cfc:	08000d3c 	.word	0x08000d3c
 8000d00:	08000d3c 	.word	0x08000d3c
 8000d04:	08000d40 	.word	0x08000d40

08000d08 <_init>:
 8000d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0a:	bf00      	nop
 8000d0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d0e:	bc08      	pop	{r3}
 8000d10:	469e      	mov	lr, r3
 8000d12:	4770      	bx	lr

08000d14 <_fini>:
 8000d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d16:	bf00      	nop
 8000d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d1a:	bc08      	pop	{r3}
 8000d1c:	469e      	mov	lr, r3
 8000d1e:	4770      	bx	lr
