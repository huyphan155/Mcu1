
huypq_stm32f407_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000968  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000af0  08000af8  00010af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000af0  08000af0  00010af8  2**0
                  CONTENTS
  4 .ARM          00000000  08000af0  08000af0  00010af8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000af0  08000af8  00010af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000af0  08000af0  00010af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000af4  08000af4  00010af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010af8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010af8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010af8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010b28  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000b7c  00000000  00000000  00010b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000002f8  00000000  00000000  000116e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000c8  00000000  00000000  000119e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000008c  00000000  00000000  00011aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002674  00000000  00000000  00011b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000010d5  00000000  00000000  000141a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00009526  00000000  00000000  0001527d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000288  00000000  00000000  0001e7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0001ea2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ad8 	.word	0x08000ad8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000ad8 	.word	0x08000ad8

080001c8 <main>:

	}
}

int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed, GPIOBtn;

	memset(&GpioLed,0,sizeof(GpioLed));
 80001ce:	f107 030c 	add.w	r3, r7, #12
 80001d2:	220c      	movs	r2, #12
 80001d4:	2100      	movs	r1, #0
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 fc52 	bl	8000a80 <memset>
	memset(&GPIOBtn,0,sizeof(GpioLed));
 80001dc:	463b      	mov	r3, r7
 80001de:	220c      	movs	r2, #12
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f000 fc4c 	bl	8000a80 <memset>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 80001e8:	4b1a      	ldr	r3, [pc, #104]	; (8000254 <main+0x8c>)
 80001ea:	60fb      	str	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80001ec:	230c      	movs	r3, #12
 80001ee:	743b      	strb	r3, [r7, #16]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80001f0:	2301      	movs	r3, #1
 80001f2:	747b      	strb	r3, [r7, #17]
	GpioLed.GPIO_PinConfig.GPIO_PinOSpeed = GPIO_OUT_SP_LOW;
 80001f4:	2300      	movs	r3, #0
 80001f6:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPER_PP;
 80001f8:	2300      	movs	r3, #0
 80001fa:	753b      	strb	r3, [r7, #20]
	GpioLed.GPIO_PinConfig.GPIO_PinPUPD = GPIO_CONFIG_NO_PUPD;
 80001fc:	2300      	movs	r3, #0
 80001fe:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 8000200:	2101      	movs	r1, #1
 8000202:	4814      	ldr	r0, [pc, #80]	; (8000254 <main+0x8c>)
 8000204:	f000 f860 	bl	80002c8 <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 8000208:	f107 030c 	add.w	r3, r7, #12
 800020c:	4618      	mov	r0, r3
 800020e:	f000 f94d 	bl	80004ac <GPIO_Init>


	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOD;
 8000212:	4b10      	ldr	r3, [pc, #64]	; (8000254 <main+0x8c>)
 8000214:	603b      	str	r3, [r7, #0]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
 8000216:	2305      	movs	r3, #5
 8000218:	713b      	strb	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800021a:	2304      	movs	r3, #4
 800021c:	717b      	strb	r3, [r7, #5]
	GPIOBtn.GPIO_PinConfig.GPIO_PinOSpeed = GPIO_OUT_SP_HIGH;
 800021e:	2302      	movs	r3, #2
 8000220:	71bb      	strb	r3, [r7, #6]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPUPD = GPIO_CONFIG_PU;
 8000222:	2301      	movs	r3, #1
 8000224:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 8000226:	2101      	movs	r1, #1
 8000228:	480a      	ldr	r0, [pc, #40]	; (8000254 <main+0x8c>)
 800022a:	f000 f84d 	bl	80002c8 <GPIO_PeriClockControl>

	GPIO_Init(&GPIOBtn);
 800022e:	463b      	mov	r3, r7
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f93b 	bl	80004ac <GPIO_Init>

	GPIO_WriteToOutputPin(GPIOD,GPIO_PIN_NO_12,GPIO_PIN_RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	210c      	movs	r1, #12
 800023a:	4806      	ldr	r0, [pc, #24]	; (8000254 <main+0x8c>)
 800023c:	f000 fb02 	bl	8000844 <GPIO_WriteToOutputPin>
	//IRQ configurations
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI9_5,15);
 8000240:	210f      	movs	r1, #15
 8000242:	2017      	movs	r0, #23
 8000244:	f000 fbc6 	bl	80009d4 <GPIO_IRQPriorityConfig>
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI9_5,ENABLE);
 8000248:	2101      	movs	r1, #1
 800024a:	2017      	movs	r0, #23
 800024c:	f000 fb3a 	bl	80008c4 <GPIO_IRQInterruptConfig>

    while(1);
 8000250:	e7fe      	b.n	8000250 <main+0x88>
 8000252:	bf00      	nop
 8000254:	40020c00 	.word	0x40020c00

08000258 <EXTI9_5_IRQHandler>:

}


void EXTI9_5_IRQHandler(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
   /// delay(); //200ms . wait till button de-bouncing gets over
	GPIO_IRQHandling(GPIO_PIN_NO_5); //clear the pending event from exti line
 800025c:	2005      	movs	r0, #5
 800025e:	f000 fbeb 	bl	8000a38 <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOD,GPIO_PIN_NO_12);
 8000262:	210c      	movs	r1, #12
 8000264:	4802      	ldr	r0, [pc, #8]	; (8000270 <EXTI9_5_IRQHandler+0x18>)
 8000266:	f000 fb15 	bl	8000894 <GPIO_ToggleOutputPin>
}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40020c00 	.word	0x40020c00

08000274 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000274:	480d      	ldr	r0, [pc, #52]	; (80002ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000276:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000278:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480c      	ldr	r0, [pc, #48]	; (80002b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800027e:	490d      	ldr	r1, [pc, #52]	; (80002b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000280:	4a0d      	ldr	r2, [pc, #52]	; (80002b8 <LoopForever+0xe>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000294:	4c0a      	ldr	r4, [pc, #40]	; (80002c0 <LoopForever+0x16>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a2:	f000 fbf5 	bl	8000a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ff8f 	bl	80001c8 <main>

080002aa <LoopForever>:

LoopForever:
  b LoopForever
 80002aa:	e7fe      	b.n	80002aa <LoopForever>
  ldr   r0, =_estack
 80002ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b8:	08000af8 	.word	0x08000af8
  ldr r2, =_sbss
 80002bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c0:	2000001c 	.word	0x2000001c

080002c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c4:	e7fe      	b.n	80002c4 <ADC_IRQHandler>
	...

080002c8 <GPIO_PeriClockControl>:
 * @retval      OTHER :  The job fail
 *
 * @Note
 */
GPIO_JobResultType GPIO_PeriClockControl(GPIO_RegMap_t *pGPIOx, uint8_t EnOrDI)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	460b      	mov	r3, r1
 80002d2:	70fb      	strb	r3, [r7, #3]
	GPIO_JobResultType eLldRetVal = GPIO_JOB_OK;
 80002d4:	2300      	movs	r3, #0
 80002d6:	73fb      	strb	r3, [r7, #15]
	if(ENABLE == EnOrDI)
 80002d8:	78fb      	ldrb	r3, [r7, #3]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d162      	bne.n	80003a4 <GPIO_PeriClockControl+0xdc>
	{
		if(pGPIOx == GPIOA)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4a68      	ldr	r2, [pc, #416]	; (8000484 <GPIO_PeriClockControl+0x1bc>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d106      	bne.n	80002f4 <GPIO_PeriClockControl+0x2c>
		{
			GPIOA_PERIF_CLK_EB();
 80002e6:	4b68      	ldr	r3, [pc, #416]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ea:	4a67      	ldr	r2, [pc, #412]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6313      	str	r3, [r2, #48]	; 0x30
 80002f2:	e0bf      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOB)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4a65      	ldr	r2, [pc, #404]	; (800048c <GPIO_PeriClockControl+0x1c4>)
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d106      	bne.n	800030a <GPIO_PeriClockControl+0x42>
		{
			GPIOB_PERIF_CLK_EB();
 80002fc:	4b62      	ldr	r3, [pc, #392]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 80002fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000300:	4a61      	ldr	r2, [pc, #388]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000302:	f043 0302 	orr.w	r3, r3, #2
 8000306:	6313      	str	r3, [r2, #48]	; 0x30
 8000308:	e0b4      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOC)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a60      	ldr	r2, [pc, #384]	; (8000490 <GPIO_PeriClockControl+0x1c8>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_PeriClockControl+0x58>
		{
			GPIOC_PERIF_CLK_EB();
 8000312:	4b5d      	ldr	r3, [pc, #372]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000316:	4a5c      	ldr	r2, [pc, #368]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000318:	f043 0304 	orr.w	r3, r3, #4
 800031c:	6313      	str	r3, [r2, #48]	; 0x30
 800031e:	e0a9      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOD)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a5c      	ldr	r2, [pc, #368]	; (8000494 <GPIO_PeriClockControl+0x1cc>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d106      	bne.n	8000336 <GPIO_PeriClockControl+0x6e>
		{
			GPIOD_PERIF_CLK_EB();
 8000328:	4b57      	ldr	r3, [pc, #348]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 800032a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032c:	4a56      	ldr	r2, [pc, #344]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 800032e:	f043 0308 	orr.w	r3, r3, #8
 8000332:	6313      	str	r3, [r2, #48]	; 0x30
 8000334:	e09e      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOE)
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	4a57      	ldr	r2, [pc, #348]	; (8000498 <GPIO_PeriClockControl+0x1d0>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d106      	bne.n	800034c <GPIO_PeriClockControl+0x84>
		{
			GPIOE_PERIF_CLK_EB();
 800033e:	4b52      	ldr	r3, [pc, #328]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000342:	4a51      	ldr	r2, [pc, #324]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000344:	f043 0310 	orr.w	r3, r3, #16
 8000348:	6313      	str	r3, [r2, #48]	; 0x30
 800034a:	e093      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOF)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a53      	ldr	r2, [pc, #332]	; (800049c <GPIO_PeriClockControl+0x1d4>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d106      	bne.n	8000362 <GPIO_PeriClockControl+0x9a>
		{
			GPIOF_PERIF_CLK_EB();
 8000354:	4b4c      	ldr	r3, [pc, #304]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000358:	4a4b      	ldr	r2, [pc, #300]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 800035a:	f043 0320 	orr.w	r3, r3, #32
 800035e:	6313      	str	r3, [r2, #48]	; 0x30
 8000360:	e088      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOG)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a4e      	ldr	r2, [pc, #312]	; (80004a0 <GPIO_PeriClockControl+0x1d8>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <GPIO_PeriClockControl+0xb0>
		{
			GPIOG_PERIF_CLK_EB();
 800036a:	4b47      	ldr	r3, [pc, #284]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036e:	4a46      	ldr	r2, [pc, #280]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000374:	6313      	str	r3, [r2, #48]	; 0x30
 8000376:	e07d      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOH)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a4a      	ldr	r2, [pc, #296]	; (80004a4 <GPIO_PeriClockControl+0x1dc>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_PeriClockControl+0xc6>
		{
			GPIOH_PERIF_CLK_EB();
 8000380:	4b41      	ldr	r3, [pc, #260]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000384:	4a40      	ldr	r2, [pc, #256]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000386:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800038a:	6313      	str	r3, [r2, #48]	; 0x30
 800038c:	e072      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOI)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a45      	ldr	r2, [pc, #276]	; (80004a8 <GPIO_PeriClockControl+0x1e0>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d16e      	bne.n	8000474 <GPIO_PeriClockControl+0x1ac>
		{
			GPIOI_PERIF_CLK_EB();
 8000396:	4b3c      	ldr	r3, [pc, #240]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039a:	4a3b      	ldr	r2, [pc, #236]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 800039c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003a0:	6313      	str	r3, [r2, #48]	; 0x30
 80003a2:	e067      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
	}
	else if(DISABLE == EnOrDI)
 80003a4:	78fb      	ldrb	r3, [r7, #3]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d162      	bne.n	8000470 <GPIO_PeriClockControl+0x1a8>
	{
		if(pGPIOx == GPIOA)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a35      	ldr	r2, [pc, #212]	; (8000484 <GPIO_PeriClockControl+0x1bc>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PeriClockControl+0xf8>
		{
			GPIOA_PERIF_CLK_DI();
 80003b2:	4b35      	ldr	r3, [pc, #212]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	4a34      	ldr	r2, [pc, #208]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 80003b8:	f023 0301 	bic.w	r3, r3, #1
 80003bc:	6313      	str	r3, [r2, #48]	; 0x30
 80003be:	e059      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOB)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a32      	ldr	r2, [pc, #200]	; (800048c <GPIO_PeriClockControl+0x1c4>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PeriClockControl+0x10e>
		{
			GPIOB_PERIF_CLK_DI();
 80003c8:	4b2f      	ldr	r3, [pc, #188]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4a2e      	ldr	r2, [pc, #184]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 80003ce:	f023 0302 	bic.w	r3, r3, #2
 80003d2:	6313      	str	r3, [r2, #48]	; 0x30
 80003d4:	e04e      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOC)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a2d      	ldr	r2, [pc, #180]	; (8000490 <GPIO_PeriClockControl+0x1c8>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0x124>
		{
			GPIOC_PERIF_CLK_DI();
 80003de:	4b2a      	ldr	r3, [pc, #168]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e2:	4a29      	ldr	r2, [pc, #164]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 80003e4:	f023 0304 	bic.w	r3, r3, #4
 80003e8:	6313      	str	r3, [r2, #48]	; 0x30
 80003ea:	e043      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOD)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a29      	ldr	r2, [pc, #164]	; (8000494 <GPIO_PeriClockControl+0x1cc>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PeriClockControl+0x13a>
		{
			GPIOD_PERIF_CLK_DI();
 80003f4:	4b24      	ldr	r3, [pc, #144]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	4a23      	ldr	r2, [pc, #140]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 80003fa:	f023 0308 	bic.w	r3, r3, #8
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000400:	e038      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOE)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a24      	ldr	r2, [pc, #144]	; (8000498 <GPIO_PeriClockControl+0x1d0>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriClockControl+0x150>
		{
			GPIOE_PERIF_CLK_DI();
 800040a:	4b1f      	ldr	r3, [pc, #124]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	4a1e      	ldr	r2, [pc, #120]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000410:	f023 0310 	bic.w	r3, r3, #16
 8000414:	6313      	str	r3, [r2, #48]	; 0x30
 8000416:	e02d      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOF)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a20      	ldr	r2, [pc, #128]	; (800049c <GPIO_PeriClockControl+0x1d4>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriClockControl+0x166>
		{
			GPIOF_PERIF_CLK_DI();
 8000420:	4b19      	ldr	r3, [pc, #100]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000424:	4a18      	ldr	r2, [pc, #96]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000426:	f023 0320 	bic.w	r3, r3, #32
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
 800042c:	e022      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOG)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a1b      	ldr	r2, [pc, #108]	; (80004a0 <GPIO_PeriClockControl+0x1d8>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PeriClockControl+0x17c>
		{
			GPIOG_PERIF_CLK_DI();
 8000436:	4b14      	ldr	r3, [pc, #80]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	4a13      	ldr	r2, [pc, #76]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 800043c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000440:	6313      	str	r3, [r2, #48]	; 0x30
 8000442:	e017      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOH)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a17      	ldr	r2, [pc, #92]	; (80004a4 <GPIO_PeriClockControl+0x1dc>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d106      	bne.n	800045a <GPIO_PeriClockControl+0x192>
		{
			GPIOH_PERIF_CLK_DI();
 800044c:	4b0e      	ldr	r3, [pc, #56]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000450:	4a0d      	ldr	r2, [pc, #52]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000456:	6313      	str	r3, [r2, #48]	; 0x30
 8000458:	e00c      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
		else if(pGPIOx == GPIOI)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a12      	ldr	r2, [pc, #72]	; (80004a8 <GPIO_PeriClockControl+0x1e0>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d108      	bne.n	8000474 <GPIO_PeriClockControl+0x1ac>
		{
			GPIOI_PERIF_CLK_DI();
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000466:	4a08      	ldr	r2, [pc, #32]	; (8000488 <GPIO_PeriClockControl+0x1c0>)
 8000468:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800046c:	6313      	str	r3, [r2, #48]	; 0x30
 800046e:	e001      	b.n	8000474 <GPIO_PeriClockControl+0x1ac>
		}
	}
	else
	{
		eLldRetVal = GPIO_BLOCK_INVALID;
 8000470:	2305      	movs	r3, #5
 8000472:	73fb      	strb	r3, [r7, #15]
	}
	return eLldRetVal;
 8000474:	7bfb      	ldrb	r3, [r7, #15]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40020000 	.word	0x40020000
 8000488:	40023800 	.word	0x40023800
 800048c:	40020400 	.word	0x40020400
 8000490:	04002080 	.word	0x04002080
 8000494:	40020c00 	.word	0x40020c00
 8000498:	40021000 	.word	0x40021000
 800049c:	40021400 	.word	0x40021400
 80004a0:	40021800 	.word	0x40021800
 80004a4:	40021c00 	.word	0x40021c00
 80004a8:	40022000 	.word	0x40022000

080004ac <GPIO_Init>:
 * 			      E5. Enable interrupt reception on that IRQ number (processor side)
 * 			      E6. Implement IRQ handler
 *
 */
GPIO_JobResultType GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b084      	sub	sp, #16
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	uint32_t tempReg = 0U;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
	GPIO_JobResultType eLldRetVal = GPIO_JOB_OK;
 80004b8:	2300      	movs	r3, #0
 80004ba:	72fb      	strb	r3, [r7, #11]

	//peripheral clock enable
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	2101      	movs	r1, #1
 80004c2:	4618      	mov	r0, r3
 80004c4:	f7ff ff00 	bl	80002c8 <GPIO_PeriClockControl>

	// 1. configure the mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	795b      	ldrb	r3, [r3, #5]
 80004cc:	2b03      	cmp	r3, #3
 80004ce:	d820      	bhi.n	8000512 <GPIO_Init+0x66>
	{
		tempReg = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	795b      	ldrb	r3, [r3, #5]
 80004d4:	461a      	mov	r2, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	791b      	ldrb	r3, [r3, #4]
 80004da:	005b      	lsls	r3, r3, #1
 80004dc:	fa02 f303 	lsl.w	r3, r2, r3
 80004e0:	60fb      	str	r3, [r7, #12]
		// clear before setting
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	791b      	ldrb	r3, [r3, #4]
 80004ec:	005b      	lsls	r3, r3, #1
 80004ee:	2103      	movs	r1, #3
 80004f0:	fa01 f303 	lsl.w	r3, r1, r3
 80004f4:	43db      	mvns	r3, r3
 80004f6:	4619      	mov	r1, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	400a      	ands	r2, r1
 80004fe:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= tempReg; // setting
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	6819      	ldr	r1, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	430a      	orrs	r2, r1
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	e0d9      	b.n	80006c6 <GPIO_Init+0x21a>
	}
	else // interrupt mode
	{
		//E0. pin must be in input mode.
		//set as input mode 00
		pGPIOHandle->pGPIOx->MODER &= ~(0x03 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	791b      	ldrb	r3, [r3, #4]
 800051c:	005b      	lsls	r3, r3, #1
 800051e:	2103      	movs	r1, #3
 8000520:	fa01 f303 	lsl.w	r3, r1, r3
 8000524:	43db      	mvns	r3, r3
 8000526:	4619      	mov	r1, r3
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	400a      	ands	r2, r1
 800052e:	601a      	str	r2, [r3, #0]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	795b      	ldrb	r3, [r3, #5]
 8000534:	2b04      	cmp	r3, #4
 8000536:	d117      	bne.n	8000568 <GPIO_Init+0xbc>
		{
			// E1. Configure the edge trigger (FT)
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000538:	4b4a      	ldr	r3, [pc, #296]	; (8000664 <GPIO_Init+0x1b8>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	7912      	ldrb	r2, [r2, #4]
 8000540:	4611      	mov	r1, r2
 8000542:	2201      	movs	r2, #1
 8000544:	408a      	lsls	r2, r1
 8000546:	4611      	mov	r1, r2
 8000548:	4a46      	ldr	r2, [pc, #280]	; (8000664 <GPIO_Init+0x1b8>)
 800054a:	430b      	orrs	r3, r1
 800054c:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //disable RT
 800054e:	4b45      	ldr	r3, [pc, #276]	; (8000664 <GPIO_Init+0x1b8>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	7912      	ldrb	r2, [r2, #4]
 8000556:	4611      	mov	r1, r2
 8000558:	2201      	movs	r2, #1
 800055a:	408a      	lsls	r2, r1
 800055c:	43d2      	mvns	r2, r2
 800055e:	4611      	mov	r1, r2
 8000560:	4a40      	ldr	r2, [pc, #256]	; (8000664 <GPIO_Init+0x1b8>)
 8000562:	400b      	ands	r3, r1
 8000564:	6093      	str	r3, [r2, #8]
 8000566:	e035      	b.n	80005d4 <GPIO_Init+0x128>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	795b      	ldrb	r3, [r3, #5]
 800056c:	2b05      	cmp	r3, #5
 800056e:	d117      	bne.n	80005a0 <GPIO_Init+0xf4>
		{
			// E1. Configure the edge trigger (RT)
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000570:	4b3c      	ldr	r3, [pc, #240]	; (8000664 <GPIO_Init+0x1b8>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7912      	ldrb	r2, [r2, #4]
 8000578:	4611      	mov	r1, r2
 800057a:	2201      	movs	r2, #1
 800057c:	408a      	lsls	r2, r1
 800057e:	4611      	mov	r1, r2
 8000580:	4a38      	ldr	r2, [pc, #224]	; (8000664 <GPIO_Init+0x1b8>)
 8000582:	430b      	orrs	r3, r1
 8000584:	6093      	str	r3, [r2, #8]
			EXTI->EXTI_FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //disable FT
 8000586:	4b37      	ldr	r3, [pc, #220]	; (8000664 <GPIO_Init+0x1b8>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	7912      	ldrb	r2, [r2, #4]
 800058e:	4611      	mov	r1, r2
 8000590:	2201      	movs	r2, #1
 8000592:	408a      	lsls	r2, r1
 8000594:	43d2      	mvns	r2, r2
 8000596:	4611      	mov	r1, r2
 8000598:	4a32      	ldr	r2, [pc, #200]	; (8000664 <GPIO_Init+0x1b8>)
 800059a:	400b      	ands	r3, r1
 800059c:	60d3      	str	r3, [r2, #12]
 800059e:	e019      	b.n	80005d4 <GPIO_Init+0x128>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	795b      	ldrb	r3, [r3, #5]
 80005a4:	2b06      	cmp	r3, #6
 80005a6:	d115      	bne.n	80005d4 <GPIO_Init+0x128>
		{
			// E1. Configure the edge trigger (RFT)
			EXTI->EXTI_FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005a8:	4b2e      	ldr	r3, [pc, #184]	; (8000664 <GPIO_Init+0x1b8>)
 80005aa:	68db      	ldr	r3, [r3, #12]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	7912      	ldrb	r2, [r2, #4]
 80005b0:	4611      	mov	r1, r2
 80005b2:	2201      	movs	r2, #1
 80005b4:	408a      	lsls	r2, r1
 80005b6:	4611      	mov	r1, r2
 80005b8:	4a2a      	ldr	r2, [pc, #168]	; (8000664 <GPIO_Init+0x1b8>)
 80005ba:	430b      	orrs	r3, r1
 80005bc:	60d3      	str	r3, [r2, #12]
			EXTI->EXTI_RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // enable both RT & FT
 80005be:	4b29      	ldr	r3, [pc, #164]	; (8000664 <GPIO_Init+0x1b8>)
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	7912      	ldrb	r2, [r2, #4]
 80005c6:	4611      	mov	r1, r2
 80005c8:	2201      	movs	r2, #1
 80005ca:	408a      	lsls	r2, r1
 80005cc:	4611      	mov	r1, r2
 80005ce:	4a25      	ldr	r2, [pc, #148]	; (8000664 <GPIO_Init+0x1b8>)
 80005d0:	430b      	orrs	r3, r1
 80005d2:	6093      	str	r3, [r2, #8]
		}
		// Configure the GPIO port selection in SYSCFG
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/4; //get the right SYSCFG_EXTICRx register
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	791b      	ldrb	r3, [r3, #4]
 80005d8:	089b      	lsrs	r3, r3, #2
 80005da:	72bb      	strb	r3, [r7, #10]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%4; //get the right position
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	791b      	ldrb	r3, [r3, #4]
 80005e0:	f003 0303 	and.w	r3, r3, #3
 80005e4:	727b      	strb	r3, [r7, #9]
		uint8_t portCode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <GPIO_Init+0x1bc>)
 80005ec:	4293      	cmp	r3, r2
 80005ee:	d04d      	beq.n	800068c <GPIO_Init+0x1e0>
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a1d      	ldr	r2, [pc, #116]	; (800066c <GPIO_Init+0x1c0>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d032      	beq.n	8000660 <GPIO_Init+0x1b4>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a1c      	ldr	r2, [pc, #112]	; (8000670 <GPIO_Init+0x1c4>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d02b      	beq.n	800065c <GPIO_Init+0x1b0>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1a      	ldr	r2, [pc, #104]	; (8000674 <GPIO_Init+0x1c8>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d024      	beq.n	8000658 <GPIO_Init+0x1ac>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a19      	ldr	r2, [pc, #100]	; (8000678 <GPIO_Init+0x1cc>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d01d      	beq.n	8000654 <GPIO_Init+0x1a8>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a17      	ldr	r2, [pc, #92]	; (800067c <GPIO_Init+0x1d0>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d016      	beq.n	8000650 <GPIO_Init+0x1a4>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a16      	ldr	r2, [pc, #88]	; (8000680 <GPIO_Init+0x1d4>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d00f      	beq.n	800064c <GPIO_Init+0x1a0>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a14      	ldr	r2, [pc, #80]	; (8000684 <GPIO_Init+0x1d8>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d008      	beq.n	8000648 <GPIO_Init+0x19c>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <GPIO_Init+0x1dc>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d101      	bne.n	8000644 <GPIO_Init+0x198>
 8000640:	2308      	movs	r3, #8
 8000642:	e024      	b.n	800068e <GPIO_Init+0x1e2>
 8000644:	2300      	movs	r3, #0
 8000646:	e022      	b.n	800068e <GPIO_Init+0x1e2>
 8000648:	2307      	movs	r3, #7
 800064a:	e020      	b.n	800068e <GPIO_Init+0x1e2>
 800064c:	2306      	movs	r3, #6
 800064e:	e01e      	b.n	800068e <GPIO_Init+0x1e2>
 8000650:	2305      	movs	r3, #5
 8000652:	e01c      	b.n	800068e <GPIO_Init+0x1e2>
 8000654:	2304      	movs	r3, #4
 8000656:	e01a      	b.n	800068e <GPIO_Init+0x1e2>
 8000658:	2303      	movs	r3, #3
 800065a:	e018      	b.n	800068e <GPIO_Init+0x1e2>
 800065c:	2302      	movs	r3, #2
 800065e:	e016      	b.n	800068e <GPIO_Init+0x1e2>
 8000660:	2301      	movs	r3, #1
 8000662:	e014      	b.n	800068e <GPIO_Init+0x1e2>
 8000664:	40013c00 	.word	0x40013c00
 8000668:	40020000 	.word	0x40020000
 800066c:	40020400 	.word	0x40020400
 8000670:	04002080 	.word	0x04002080
 8000674:	40020c00 	.word	0x40020c00
 8000678:	40021000 	.word	0x40021000
 800067c:	40021400 	.word	0x40021400
 8000680:	40021800 	.word	0x40021800
 8000684:	40021c00 	.word	0x40021c00
 8000688:	40022000 	.word	0x40022000
 800068c:	2300      	movs	r3, #0
 800068e:	723b      	strb	r3, [r7, #8]
		SYSCFG_PERIF_CLK_EB(); // enable clock for SYSCFG
 8000690:	4b69      	ldr	r3, [pc, #420]	; (8000838 <GPIO_Init+0x38c>)
 8000692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000694:	4a68      	ldr	r2, [pc, #416]	; (8000838 <GPIO_Init+0x38c>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->SYSCFG_EXTICR[temp1] = portCode << (temp2*4);
 800069c:	7a3a      	ldrb	r2, [r7, #8]
 800069e:	7a7b      	ldrb	r3, [r7, #9]
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	fa02 f103 	lsl.w	r1, r2, r3
 80006a6:	4a65      	ldr	r2, [pc, #404]	; (800083c <GPIO_Init+0x390>)
 80006a8:	7abb      	ldrb	r3, [r7, #10]
 80006aa:	3302      	adds	r3, #2
 80006ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		// E2. Enable interrupt delivery from peripheral to Processor (peripheral side )
		//. Enable the EXTI interrupt delivery using IMR
		EXTI->EXTI_IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006b0:	4b63      	ldr	r3, [pc, #396]	; (8000840 <GPIO_Init+0x394>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	7912      	ldrb	r2, [r2, #4]
 80006b8:	4611      	mov	r1, r2
 80006ba:	2201      	movs	r2, #1
 80006bc:	408a      	lsls	r2, r1
 80006be:	4611      	mov	r1, r2
 80006c0:	4a5f      	ldr	r2, [pc, #380]	; (8000840 <GPIO_Init+0x394>)
 80006c2:	430b      	orrs	r3, r1
 80006c4:	6013      	str	r3, [r2, #0]
	}

	// reset temp Register
	tempReg = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]

	// 2. configure the Speed
	tempReg = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOSpeed << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	799b      	ldrb	r3, [r3, #6]
 80006ce:	461a      	mov	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	005b      	lsls	r3, r3, #1
 80006d6:	fa02 f303 	lsl.w	r3, r2, r3
 80006da:	60fb      	str	r3, [r7, #12]
	// clear before setting
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x03 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	689a      	ldr	r2, [r3, #8]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	2103      	movs	r1, #3
 80006ea:	fa01 f303 	lsl.w	r3, r1, r3
 80006ee:	43db      	mvns	r3, r3
 80006f0:	4619      	mov	r1, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	400a      	ands	r2, r1
 80006f8:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= tempReg;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6899      	ldr	r1, [r3, #8]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	68fa      	ldr	r2, [r7, #12]
 8000706:	430a      	orrs	r2, r1
 8000708:	609a      	str	r2, [r3, #8]
	// reset temp Register
	tempReg = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]

	// 3. configure the PUPD settings
	tempReg = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinPUPD << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	79db      	ldrb	r3, [r3, #7]
 8000712:	461a      	mov	r2, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	791b      	ldrb	r3, [r3, #4]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	60fb      	str	r3, [r7, #12]
	// clear before setting
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x03 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	68da      	ldr	r2, [r3, #12]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	2103      	movs	r1, #3
 800072e:	fa01 f303 	lsl.w	r3, r1, r3
 8000732:	43db      	mvns	r3, r3
 8000734:	4619      	mov	r1, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	400a      	ands	r2, r1
 800073c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= tempReg;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	68d9      	ldr	r1, [r3, #12]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	68fa      	ldr	r2, [r7, #12]
 800074a:	430a      	orrs	r2, r1
 800074c:	60da      	str	r2, [r3, #12]
	// reset temp Register
	tempReg = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]

	// 4. configure the OPType
	tempReg = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7a1b      	ldrb	r3, [r3, #8]
 8000756:	461a      	mov	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	791b      	ldrb	r3, [r3, #4]
 800075c:	005b      	lsls	r3, r3, #1
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	60fb      	str	r3, [r7, #12]
	// clear before setting
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x03 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	685a      	ldr	r2, [r3, #4]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	2103      	movs	r1, #3
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43db      	mvns	r3, r3
 8000778:	4619      	mov	r1, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	400a      	ands	r2, r1
 8000780:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= tempReg;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	6859      	ldr	r1, [r3, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	430a      	orrs	r2, r1
 8000790:	605a      	str	r2, [r3, #4]
	// reset temp Register
	tempReg = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]

	//5. Configure the alternate functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	795b      	ldrb	r3, [r3, #5]
 800079a:	2b02      	cmp	r3, #2
 800079c:	d147      	bne.n	800082e <GPIO_Init+0x382>
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < 8U)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	2b07      	cmp	r3, #7
 80007a4:	d820      	bhi.n	80007e8 <GPIO_Init+0x33c>
		{
			tempReg = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	7a5b      	ldrb	r3, [r3, #9]
 80007aa:	461a      	mov	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	60fb      	str	r3, [r7, #12]
			// clear before setting
			pGPIOHandle->pGPIOx->AFRL &= ~(0x0F << (4*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	6a1a      	ldr	r2, [r3, #32]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	791b      	ldrb	r3, [r3, #4]
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	210f      	movs	r1, #15
 80007c6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ca:	43db      	mvns	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	400a      	ands	r2, r1
 80007d4:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= tempReg;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	6a19      	ldr	r1, [r3, #32]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	430a      	orrs	r2, r1
 80007e4:	621a      	str	r2, [r3, #32]
 80007e6:	e020      	b.n	800082a <GPIO_Init+0x37e>
		}
		else
		{
			tempReg = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber-8)));
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	7a5b      	ldrb	r3, [r3, #9]
 80007ec:	461a      	mov	r2, r3
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	791b      	ldrb	r3, [r3, #4]
 80007f2:	3b08      	subs	r3, #8
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	60fb      	str	r3, [r7, #12]
			// clear before setting
			pGPIOHandle->pGPIOx->AFRH &= ~(0x0F << (4*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	791b      	ldrb	r3, [r3, #4]
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	210f      	movs	r1, #15
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	43db      	mvns	r3, r3
 8000810:	4619      	mov	r1, r3
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	400a      	ands	r2, r1
 8000818:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= tempReg;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	430a      	orrs	r2, r1
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
		}
		// reset temp Register
		tempReg = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	60fb      	str	r3, [r7, #12]
	}

	return eLldRetVal;
 800082e:	7afb      	ldrb	r3, [r7, #11]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40013800 	.word	0x40013800
 8000840:	40013c00 	.word	0x40013c00

08000844 <GPIO_WriteToOutputPin>:
 *
 * @Note
 *
 */
GPIO_JobResultType GPIO_WriteToOutputPin(GPIO_RegMap_t *pGPIOx, uint8_t pinNumber, uint8_t value)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	460b      	mov	r3, r1
 800084e:	70fb      	strb	r3, [r7, #3]
 8000850:	4613      	mov	r3, r2
 8000852:	70bb      	strb	r3, [r7, #2]
	GPIO_JobResultType eLldRetVal = GPIO_JOB_OK;
 8000854:	2300      	movs	r3, #0
 8000856:	73fb      	strb	r3, [r7, #15]
	if (value == GPIO_PIN_SET)
 8000858:	78bb      	ldrb	r3, [r7, #2]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d109      	bne.n	8000872 <GPIO_WriteToOutputPin+0x2e>
	{
		// write 1
		pGPIOx->ODR |= (1 << pinNumber );
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	78fa      	ldrb	r2, [r7, #3]
 8000864:	2101      	movs	r1, #1
 8000866:	fa01 f202 	lsl.w	r2, r1, r2
 800086a:	431a      	orrs	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	615a      	str	r2, [r3, #20]
 8000870:	e009      	b.n	8000886 <GPIO_WriteToOutputPin+0x42>
	}
	else
	{
		// write 0
		pGPIOx->ODR &= ~(1 << pinNumber );
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	78fa      	ldrb	r2, [r7, #3]
 8000878:	2101      	movs	r1, #1
 800087a:	fa01 f202 	lsl.w	r2, r1, r2
 800087e:	43d2      	mvns	r2, r2
 8000880:	401a      	ands	r2, r3
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	615a      	str	r2, [r3, #20]
	}
	return eLldRetVal;
 8000886:	7bfb      	ldrb	r3, [r7, #15]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <GPIO_ToggleOutputPin>:
 *
 * @Note
 *
 */
GPIO_JobResultType GPIO_ToggleOutputPin(GPIO_RegMap_t *pGPIOx, uint8_t pinNumber)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
	GPIO_JobResultType eLldRetVal = GPIO_JOB_OK;
 80008a0:	2300      	movs	r3, #0
 80008a2:	73fb      	strb	r3, [r7, #15]
	pGPIOx->ODR ^= (1 << pinNumber );
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	78fa      	ldrb	r2, [r7, #3]
 80008aa:	2101      	movs	r1, #1
 80008ac:	fa01 f202 	lsl.w	r2, r1, r2
 80008b0:	405a      	eors	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	615a      	str	r2, [r3, #20]
	return eLldRetVal;
 80008b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <GPIO_IRQInterruptConfig>:
 *
 * @note This function configures interrupt settings by programming NVIC ISER/ICER registers.
 * 		  E5. Enable interrupt reception on that IRQ number (processor side)
 */
GPIO_JobResultType GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnOrDI)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	460a      	mov	r2, r1
 80008ce:	71fb      	strb	r3, [r7, #7]
 80008d0:	4613      	mov	r3, r2
 80008d2:	71bb      	strb	r3, [r7, #6]
	GPIO_JobResultType eLldRetVal = GPIO_JOB_OK;
 80008d4:	2300      	movs	r3, #0
 80008d6:	73fb      	strb	r3, [r7, #15]
	if(EnOrDI == ENABLE)
 80008d8:	79bb      	ldrb	r3, [r7, #6]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d133      	bne.n	8000946 <GPIO_IRQInterruptConfig+0x82>
	{
		if(IRQNumber <= 31)
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	2b1f      	cmp	r3, #31
 80008e2:	d80a      	bhi.n	80008fa <GPIO_IRQInterruptConfig+0x36>
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );
 80008e4:	4b35      	ldr	r3, [pc, #212]	; (80009bc <GPIO_IRQInterruptConfig+0xf8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	79fa      	ldrb	r2, [r7, #7]
 80008ea:	2101      	movs	r1, #1
 80008ec:	fa01 f202 	lsl.w	r2, r1, r2
 80008f0:	4611      	mov	r1, r2
 80008f2:	4a32      	ldr	r2, [pc, #200]	; (80009bc <GPIO_IRQInterruptConfig+0xf8>)
 80008f4:	430b      	orrs	r3, r1
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	e058      	b.n	80009ac <GPIO_IRQInterruptConfig+0xe8>
		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b1f      	cmp	r3, #31
 80008fe:	d90f      	bls.n	8000920 <GPIO_IRQInterruptConfig+0x5c>
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	2b3f      	cmp	r3, #63	; 0x3f
 8000904:	d80c      	bhi.n	8000920 <GPIO_IRQInterruptConfig+0x5c>
		{
			//program ISER1 register
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
 8000906:	4b2e      	ldr	r3, [pc, #184]	; (80009c0 <GPIO_IRQInterruptConfig+0xfc>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	79fa      	ldrb	r2, [r7, #7]
 800090c:	f002 021f 	and.w	r2, r2, #31
 8000910:	2101      	movs	r1, #1
 8000912:	fa01 f202 	lsl.w	r2, r1, r2
 8000916:	4611      	mov	r1, r2
 8000918:	4a29      	ldr	r2, [pc, #164]	; (80009c0 <GPIO_IRQInterruptConfig+0xfc>)
 800091a:	430b      	orrs	r3, r1
 800091c:	6013      	str	r3, [r2, #0]
 800091e:	e045      	b.n	80009ac <GPIO_IRQInterruptConfig+0xe8>
		}
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b3f      	cmp	r3, #63	; 0x3f
 8000924:	d942      	bls.n	80009ac <GPIO_IRQInterruptConfig+0xe8>
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b5f      	cmp	r3, #95	; 0x5f
 800092a:	d83f      	bhi.n	80009ac <GPIO_IRQInterruptConfig+0xe8>
		{
			//program ISER2 register //64 to 95
			*NVIC_ISER2 |= ( 1 << (IRQNumber % 64) );
 800092c:	4b25      	ldr	r3, [pc, #148]	; (80009c4 <GPIO_IRQInterruptConfig+0x100>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	79fa      	ldrb	r2, [r7, #7]
 8000932:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000936:	2101      	movs	r1, #1
 8000938:	fa01 f202 	lsl.w	r2, r1, r2
 800093c:	4611      	mov	r1, r2
 800093e:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <GPIO_IRQInterruptConfig+0x100>)
 8000940:	430b      	orrs	r3, r1
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e032      	b.n	80009ac <GPIO_IRQInterruptConfig+0xe8>
		}
	}else
	{
		if(IRQNumber <= 31)
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2b1f      	cmp	r3, #31
 800094a:	d80a      	bhi.n	8000962 <GPIO_IRQInterruptConfig+0x9e>
		{
			//program ICER0 register
			*NVIC_ICER0 |= ( 1 << IRQNumber );
 800094c:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <GPIO_IRQInterruptConfig+0x104>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	79fa      	ldrb	r2, [r7, #7]
 8000952:	2101      	movs	r1, #1
 8000954:	fa01 f202 	lsl.w	r2, r1, r2
 8000958:	4611      	mov	r1, r2
 800095a:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <GPIO_IRQInterruptConfig+0x104>)
 800095c:	430b      	orrs	r3, r1
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	e024      	b.n	80009ac <GPIO_IRQInterruptConfig+0xe8>
		}else if(IRQNumber > 31 && IRQNumber < 64 )
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	2b1f      	cmp	r3, #31
 8000966:	d90f      	bls.n	8000988 <GPIO_IRQInterruptConfig+0xc4>
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	2b3f      	cmp	r3, #63	; 0x3f
 800096c:	d80c      	bhi.n	8000988 <GPIO_IRQInterruptConfig+0xc4>
		{
			//program ICER1 register
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
 800096e:	4b17      	ldr	r3, [pc, #92]	; (80009cc <GPIO_IRQInterruptConfig+0x108>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	79fa      	ldrb	r2, [r7, #7]
 8000974:	f002 021f 	and.w	r2, r2, #31
 8000978:	2101      	movs	r1, #1
 800097a:	fa01 f202 	lsl.w	r2, r1, r2
 800097e:	4611      	mov	r1, r2
 8000980:	4a12      	ldr	r2, [pc, #72]	; (80009cc <GPIO_IRQInterruptConfig+0x108>)
 8000982:	430b      	orrs	r3, r1
 8000984:	6013      	str	r3, [r2, #0]
 8000986:	e011      	b.n	80009ac <GPIO_IRQInterruptConfig+0xe8>
		}
		else if(IRQNumber >= 64 && IRQNumber < 96 )
 8000988:	79fb      	ldrb	r3, [r7, #7]
 800098a:	2b3f      	cmp	r3, #63	; 0x3f
 800098c:	d90e      	bls.n	80009ac <GPIO_IRQInterruptConfig+0xe8>
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	2b5f      	cmp	r3, #95	; 0x5f
 8000992:	d80b      	bhi.n	80009ac <GPIO_IRQInterruptConfig+0xe8>
		{
			//program ICER2 register
			*NVIC_ICER2 |= ( 1 << (IRQNumber % 64) );
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <GPIO_IRQInterruptConfig+0x10c>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	79fa      	ldrb	r2, [r7, #7]
 800099a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800099e:	2101      	movs	r1, #1
 80009a0:	fa01 f202 	lsl.w	r2, r1, r2
 80009a4:	4611      	mov	r1, r2
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <GPIO_IRQInterruptConfig+0x10c>)
 80009a8:	430b      	orrs	r3, r1
 80009aa:	6013      	str	r3, [r2, #0]
		}
	}
	return eLldRetVal;
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	e000e100 	.word	0xe000e100
 80009c0:	e000e104 	.word	0xe000e104
 80009c4:	e000e108 	.word	0xe000e108
 80009c8:	e000e180 	.word	0xe000e180
 80009cc:	e000e184 	.word	0xe000e184
 80009d0:	e000e188 	.word	0xe000e188

080009d4 <GPIO_IRQPriorityConfig>:
 *
 * @note This function configures the priority of the IRQ by writing to NVIC IPR registers.
 *       E4. configure the IRQ priority for the identified IRQ number(processor side )
 */
GPIO_JobResultType GPIO_IRQPriorityConfig(uint8_t IRQNumber,uint8_t IRQPriority)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	460a      	mov	r2, r1
 80009de:	71fb      	strb	r3, [r7, #7]
 80009e0:	4613      	mov	r3, r2
 80009e2:	71bb      	strb	r3, [r7, #6]
	GPIO_JobResultType eLldRetVal = GPIO_JOB_OK;
 80009e4:	2300      	movs	r3, #0
 80009e6:	73fb      	strb	r3, [r7, #15]
	/*1. find out the ipr register of IRQNumber*/
	uint8_t iprx = IRQNumber / 4 ;
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	73bb      	strb	r3, [r7, #14]
	/*2. tim ra field(8 bit) quy dinh priority cua loai IRQ*/
	uint8_t iprx_section = IRQNumber % 4;
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	f003 0303 	and.w	r3, r3, #3
 80009f4:	737b      	strb	r3, [r7, #13]

	uint8_t shift_amount = (8*iprx_section) + (8 - NUM_PR_BITS_IMPLEMENTED);
 80009f6:	7b7b      	ldrb	r3, [r7, #13]
 80009f8:	00db      	lsls	r3, r3, #3
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	3304      	adds	r3, #4
 80009fe:	733b      	strb	r3, [r7, #12]

	/*con tro kieu uint32 nen chi can + iprx de ra duoc dia chi thanh ghi*/
	*(NVIC_IPR_BASEADDR + iprx) |= ( IRQPriority << shift_amount);
 8000a00:	7bbb      	ldrb	r3, [r7, #14]
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000a08:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	79b9      	ldrb	r1, [r7, #6]
 8000a10:	7b3b      	ldrb	r3, [r7, #12]
 8000a12:	fa01 f303 	lsl.w	r3, r1, r3
 8000a16:	4619      	mov	r1, r3
 8000a18:	7bbb      	ldrb	r3, [r7, #14]
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000a20:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000a24:	430a      	orrs	r2, r1
 8000a26:	601a      	str	r2, [r3, #0]
	return eLldRetVal;
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3714      	adds	r7, #20
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
	...

08000a38 <GPIO_IRQHandling>:
 *               IRQ handle should be implement in application code,
 *               and call to this function form main.c.
 *
 */
GPIO_JobResultType GPIO_IRQHandling(uint8_t pinNumber)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
	GPIO_JobResultType eLldRetVal = GPIO_JOB_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	73fb      	strb	r3, [r7, #15]
	//clear the exti PR register corresponding to the pin number
	if (EXTI->EXTI_PR & (1 << pinNumber))
 8000a46:	4b0d      	ldr	r3, [pc, #52]	; (8000a7c <GPIO_IRQHandling+0x44>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	79fa      	ldrb	r2, [r7, #7]
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a52:	4013      	ands	r3, r2
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d009      	beq.n	8000a6c <GPIO_IRQHandling+0x34>
	{
		//clear by write 1 to the PR register
		EXTI->EXTI_PR |= (1 << pinNumber);
 8000a58:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <GPIO_IRQHandling+0x44>)
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	79fa      	ldrb	r2, [r7, #7]
 8000a5e:	2101      	movs	r1, #1
 8000a60:	fa01 f202 	lsl.w	r2, r1, r2
 8000a64:	4611      	mov	r1, r2
 8000a66:	4a05      	ldr	r2, [pc, #20]	; (8000a7c <GPIO_IRQHandling+0x44>)
 8000a68:	430b      	orrs	r3, r1
 8000a6a:	6153      	str	r3, [r2, #20]
	}
	return eLldRetVal;
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3714      	adds	r7, #20
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	40013c00 	.word	0x40013c00

08000a80 <memset>:
 8000a80:	4402      	add	r2, r0
 8000a82:	4603      	mov	r3, r0
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d100      	bne.n	8000a8a <memset+0xa>
 8000a88:	4770      	bx	lr
 8000a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8000a8e:	e7f9      	b.n	8000a84 <memset+0x4>

08000a90 <__libc_init_array>:
 8000a90:	b570      	push	{r4, r5, r6, lr}
 8000a92:	4d0d      	ldr	r5, [pc, #52]	; (8000ac8 <__libc_init_array+0x38>)
 8000a94:	4c0d      	ldr	r4, [pc, #52]	; (8000acc <__libc_init_array+0x3c>)
 8000a96:	1b64      	subs	r4, r4, r5
 8000a98:	10a4      	asrs	r4, r4, #2
 8000a9a:	2600      	movs	r6, #0
 8000a9c:	42a6      	cmp	r6, r4
 8000a9e:	d109      	bne.n	8000ab4 <__libc_init_array+0x24>
 8000aa0:	4d0b      	ldr	r5, [pc, #44]	; (8000ad0 <__libc_init_array+0x40>)
 8000aa2:	4c0c      	ldr	r4, [pc, #48]	; (8000ad4 <__libc_init_array+0x44>)
 8000aa4:	f000 f818 	bl	8000ad8 <_init>
 8000aa8:	1b64      	subs	r4, r4, r5
 8000aaa:	10a4      	asrs	r4, r4, #2
 8000aac:	2600      	movs	r6, #0
 8000aae:	42a6      	cmp	r6, r4
 8000ab0:	d105      	bne.n	8000abe <__libc_init_array+0x2e>
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}
 8000ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab8:	4798      	blx	r3
 8000aba:	3601      	adds	r6, #1
 8000abc:	e7ee      	b.n	8000a9c <__libc_init_array+0xc>
 8000abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac2:	4798      	blx	r3
 8000ac4:	3601      	adds	r6, #1
 8000ac6:	e7f2      	b.n	8000aae <__libc_init_array+0x1e>
 8000ac8:	08000af0 	.word	0x08000af0
 8000acc:	08000af0 	.word	0x08000af0
 8000ad0:	08000af0 	.word	0x08000af0
 8000ad4:	08000af4 	.word	0x08000af4

08000ad8 <_init>:
 8000ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ada:	bf00      	nop
 8000adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ade:	bc08      	pop	{r3}
 8000ae0:	469e      	mov	lr, r3
 8000ae2:	4770      	bx	lr

08000ae4 <_fini>:
 8000ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae6:	bf00      	nop
 8000ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aea:	bc08      	pop	{r3}
 8000aec:	469e      	mov	lr, r3
 8000aee:	4770      	bx	lr
